{
  "address": "0x36C02dA8a0983159322a80FFE9F24b1acfF8B570",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_token1Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_token2Amount",
          "type": "uint256"
        }
      ],
      "name": "depositErcToErc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_t1ToT2",
          "type": "bool"
        }
      ],
      "name": "ercToErcSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_t1ToT2",
          "type": "bool"
        }
      ],
      "name": "ercToErcWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_t1ToT2",
          "type": "bool"
        }
      ],
      "name": "estimateErcToErcDeposit",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_t1ToT2",
          "type": "bool"
        }
      ],
      "name": "estimateErcToErcWithdrawAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        }
      ],
      "name": "getPoolDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_t1ToT2",
          "type": "bool"
        }
      ],
      "name": "getRelativePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        }
      ],
      "name": "getUserDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        }
      ],
      "name": "poolExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x50aed992d4c7f3b31c0dcd62b9330995ccfca8676cfd4db4021d8ad214ee8acb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x36C02dA8a0983159322a80FFE9F24b1acfF8B570",
    "transactionIndex": 0,
    "gasUsed": "3017829",
    "logsBloom": "0x
    "blockHash": "0x0de8b584ba4cc3acc18f837802db9c6129c75e4a676c6ad3ef6028a26e6845ab",
    "transactionHash": "0x50aed992d4c7f3b31c0dcd62b9330995ccfca8676cfd4db4021d8ad214ee8acb",
    "logs": [],
    "blockNumber": 62,
    "cumulativeGasUsed": "3017829",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c2e49921604f081b9a16f2cbcb720461",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_token1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token2Amount\",\"type\":\"uint256\"}],\"name\":\"depositErcToErc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_t1ToT2\",\"type\":\"bool\"}],\"name\":\"ercToErcSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_t1ToT2\",\"type\":\"bool\"}],\"name\":\"ercToErcWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_t1ToT2\",\"type\":\"bool\"}],\"name\":\"estimateErcToErcDeposit\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_t1ToT2\",\"type\":\"bool\"}],\"name\":\"estimateErcToErcWithdrawAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"}],\"name\":\"getPoolDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_t1ToT2\",\"type\":\"bool\"}],\"name\":\"getRelativePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"}],\"name\":\"getUserDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"}],\"name\":\"poolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20ToERC20.sol\":\"ERC20ToERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ERC20ToERC20.sol\":{\"content\":\"// SPDX-License-Identifier: no-license\\npragma solidity 0.8.17;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./PriceFeed.sol\\\";\\nimport \\\"./libraries/LibFacet.sol\\\";\\n\\ncontract ERC20ToERC20 is ERC20, Modifiers {\\n    constructor() ERC20(\\\"ERC20ToERC20\\\", \\\"ETET\\\") {}\\n\\n    function depositErcToErc(\\n        string memory _pair,\\n        uint256 _token1Amount,\\n        uint256 _token2Amount\\n    )\\n        external\\n        Modifiers.poolCreated(_pair)\\n        Modifiers.hasTokens(_pair, 1, _token1Amount)\\n        Modifiers.hasTokens(_pair, 2, _token2Amount)\\n    {\\n        uint256 t2Goal = estimateErcToErcDeposit(_pair, _token1Amount, true)[1];\\n        require(\\n            LibFacet.abs(int256(t2Goal) - int256(_token2Amount)) < 10**10,\\n            \\\"Amount inserted is not helping the pool get to equilibrium state.\\\"\\n        );\\n\\n        ERC20(LibFacet.facetStorage().tokenPools[_pair].token1Con).transferFrom(\\n                msg.sender,\\n                address(this),\\n               _token1Amount \\n            );\\n        ERC20(LibFacet.facetStorage().tokenPools[_pair].token2Con).transferFrom(\\n                msg.sender,\\n                address(this),\\n               _token2Amount \\n            );\\n\\n        LibFacet.facetStorage().tokenPools[_pair].token1Amount += _token1Amount;\\n        LibFacet.facetStorage().tokenPools[_pair].token2Amount += _token2Amount;\\n\\n        if (\\n            LibFacet\\n            .facetStorage()\\n            .liquidityShares[_pair][msg.sender].t1Amount ==\\n            0 &&\\n            LibFacet\\n            .facetStorage()\\n            .liquidityShares[_pair][msg.sender].t2Amount ==\\n            0\\n        ) LibFacet.facetStorage().liquidityProviders[_pair].push(msg.sender);\\n        LibFacet\\n        .facetStorage()\\n        .liquidityShares[_pair][msg.sender].t1Amount += _token1Amount;\\n        LibFacet\\n        .facetStorage()\\n        .liquidityShares[_pair][msg.sender].t2Amount += _token2Amount;\\n\\n        if (LibFacet.facetStorage().tokenPools[_pair].token1Seed == 0) {\\n            LibFacet.facetStorage().tokenPools[_pair].token1Seed = _token1Amount;\\n            LibFacet.facetStorage().tokenPools[_pair].token2Seed = _token2Amount;\\n        }\\n    }\\n\\n    function ercToErcSwap(\\n        string memory _pair,\\n        uint256 _tokenAmount,\\n        bool _t1ToT2\\n    ) external {\\n        require(\\n            _t1ToT2\\n                ? ERC20(LibFacet.facetStorage().tokenPools[_pair].token1Con)\\n                    .balanceOf(msg.sender) >= _tokenAmount\\n                : ERC20(LibFacet.facetStorage().tokenPools[_pair].token2Con)\\n                    .balanceOf(msg.sender) >= _tokenAmount,\\n            \\\"Insufficient ERC20 balance.\\\"\\n        );\\n\\n        LibFacet.PairPool memory pool = LibFacet.facetStorage().tokenPools[\\n            _pair\\n        ];\\n        uint256 fee = _tokenAmount / 500;\\n        uint256 invariant = pool.token1Amount * pool.token2Amount;\\n        uint256 newToken1Pool;\\n        uint256 newToken2Pool;\\n        uint256 tokensOut;\\n        if (_t1ToT2) {\\n            newToken1Pool = pool.token1Amount + _tokenAmount;\\n            newToken2Pool = invariant / (newToken1Pool - fee);\\n            tokensOut = pool.token2Amount - newToken2Pool;\\n        } else {\\n            newToken2Pool = pool.token2Amount + _tokenAmount;\\n            newToken1Pool = invariant / (newToken2Pool - fee);\\n            tokensOut = pool.token1Amount - newToken1Pool;\\n        }\\n        pool.token1Amount = newToken1Pool;\\n        pool.token2Amount = newToken2Pool;\\n        LibFacet.facetStorage().tokenPools[_pair] = pool;\\n\\n        ERC20 fromContract = _t1ToT2\\n            ? ERC20(pool.token1Con)\\n            : ERC20(pool.token2Con);\\n        ERC20 toContract = _t1ToT2\\n            ? ERC20(pool.token2Con)\\n            : ERC20(pool.token1Con);\\n\\n        fromContract.transferFrom(msg.sender, address(this), _tokenAmount);\\n        toContract.transfer(msg.sender, tokensOut);\\n\\n        LibFacet.facetStorage().tokenPools[_pair].t1Fees += fee;\\n        LibFacet.facetStorage().tokenPools[_pair].token1Amount = newToken1Pool;\\n        LibFacet.facetStorage().tokenPools[_pair].token2Amount = newToken2Pool;\\n    }\\n\\n    function estimateErcToErcWithdrawAmounts(string memory _pair, uint256 _amount, bool _t1ToT2) external view returns (uint256, uint256) {\\n        return LibFacet.estimateWithdrawAmounts(_pair, _amount, _t1ToT2);\\n    }\\n\\n    function ercToErcWithdraw(\\n        string memory _pair,\\n        uint256 _amount,\\n        bool _t1ToT2\\n\\n   ) external {\\n        LibFacet.withdrawShare(_pair, msg.sender, _amount, _t1ToT2, false);\\n    }\\n\\n    function getPoolDeposits(string memory _pair) external view returns (uint256, uint256){\\n        return LibFacet.getPoolDeposits(_pair);\\n    }\\n\\n    function getUserDeposits(string memory _pair)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (\\n            LibFacet.facetStorage().liquidityShares[_pair][msg.sender].t1Amount,\\n            LibFacet.facetStorage().liquidityShares[_pair][msg.sender].t2Amount\\n        );\\n    }\\n\\n    function poolExists(string memory _pair) external view returns (bool) {\\n        return LibFacet.facetStorage().tokenPools[_pair].created;\\n    }\\n\\n    function estimateErcToErcDeposit(string memory _pair, uint256 _tokenAmount, bool _t1ToT2) public view returns (uint256[2] memory) {\\n        return LibFacet.estimateDeposit(_pair, _tokenAmount, _t1ToT2);\\n    }\\n\\n    function getRelativePrice(string memory _pair, uint256 _tokenAmount, bool _t1ToT2) external view returns (uint256) {\\n        return LibFacet.getRelativePrice(_pair, _tokenAmount, _t1ToT2);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x08d8c4087b522d28f5b93963735db72ea0e409fcb228487b618166aa8d45510d\",\"license\":\"no-license\"},\"contracts/PriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: no-license\\npragma solidity 0.8.17;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\ncontract PriceFeed {\\n    mapping(address => AggregatorV3Interface) priceFeeds;\\n\\n    constructor(\\n        address[] memory _tokenContracts,\\n        address[] memory _tokenAggregators\\n    ) {\\n        require(\\n            _tokenContracts.length == _tokenAggregators.length,\\n            \\\"Mismatch in amount of token contracts and token aggregators.\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _tokenContracts.length; i++) {\\n            address tokenContract = _tokenContracts[i];\\n            address tokenAggregator = _tokenAggregators[i];\\n            priceFeeds[tokenContract] = AggregatorV3Interface(tokenAggregator);\\n        }\\n    }\\n\\n    function getPrice(address _tokenContract) public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeeds[_tokenContract].latestRoundData();\\n        return uint256(price);\\n    }\\n}\\n\",\"keccak256\":\"0x4a9b267370e8fce7a2ed2100c2e428ace45d7f708a2f9e3d775ae3077e5feabe\",\"license\":\"no-license\"},\"contracts/libraries/LibFacet.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../PriceFeed.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary LibFacet {\\n    bytes32 constant FACET_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standart.facet.storage\\\");\\n\\n    struct LiquidityShare {\\n        uint256 t1Amount;\\n        uint256 t2Amount;\\n    }\\n\\n    struct PairPool {\\n        string token1;\\n        string token2;\\n        address token1Con;\\n        address token2Con;\\n        uint256 token1Amount;\\n        uint256 token2Amount;\\n        uint256 token1Seed;\\n        uint256 token2Seed;\\n        uint256 t1Fees;\\n        uint256 t2Fees;\\n        bool created;\\n    }\\n\\n    struct FacetStorage {\\n        PriceFeed priceFeed;\\n        mapping(string => PairPool) tokenPools;\\n        mapping(string => mapping(address => LiquidityShare)) liquidityShares;\\n        mapping(string => address[]) liquidityProviders;\\n        string[] pools;\\n        uint256 feeDivisor;\\n        uint256 precisionMult;\\n        LiquidityShare share;\\n        PairPool pool;\\n    }\\n\\n    function facetStorage() internal pure returns (FacetStorage storage fs) {\\n        bytes32 position = FACET_STORAGE_POSITION;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n\\n    function poolIsSeeded(string memory _pair) internal view returns (bool) {\\n        FacetStorage storage fs = facetStorage();\\n        return\\n            fs.tokenPools[_pair].token1Seed != 0 &&\\n            fs.tokenPools[_pair].token2Seed != 0;\\n    }\\n\\n    function abs(int256 _x) internal pure returns (uint256) {\\n        return _x >= 0 ? uint256(_x) : uint256(-_x);\\n    }\\n\\n    function getLpShare(string memory _pair, address _user)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 t1Total;\\n        uint256 t2Total;\\n        (t1Total, t2Total) = getPoolDeposits(_pair);\\n        uint256 t1Stake = (facetStorage().precisionMult *\\n            facetStorage().liquidityShares[_pair][_user].t1Amount) / t1Total;\\n        uint256 t2Stake = (facetStorage().precisionMult *\\n            facetStorage().liquidityShares[_pair][_user].t2Amount) / t2Total;\\n\\n        return (t1Stake, t2Stake);\\n    }\\n\\n    function getPoolDeposits(string memory _pair)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 t1Total = 0;\\n        uint256 t2Total = 0;\\n        for (\\n            uint128 i = 0;\\n            i < facetStorage().liquidityProviders[_pair].length;\\n            i++\\n        ) {\\n            address lp = facetStorage().liquidityProviders[_pair][i];\\n            t1Total += LibFacet\\n            .facetStorage()\\n            .liquidityShares[_pair][lp].t1Amount;\\n            t2Total += LibFacet\\n            .facetStorage()\\n            .liquidityShares[_pair][lp].t2Amount;\\n        }\\n\\n        return (t1Total, t2Total);\\n    }\\n\\n    function getNoFeeWithdrawAmounts(\\n        string memory _pair,\\n        address _user,\\n        uint256 _tokenAmount,\\n        bool _t1ToT2\\n    ) internal view returns (uint256, uint256) {\\n        uint256 t2Price = (facetStorage().precisionMult *\\n            facetStorage().tokenPools[_pair].token2Seed) /\\n            facetStorage().tokenPools[_pair].token1Seed;\\n        uint256 t1Price = (facetStorage().precisionMult *\\n            facetStorage().tokenPools[_pair].token1Seed) /\\n            facetStorage().tokenPools[_pair].token2Seed;\\n\\n        uint256 t1Amount;\\n        uint256 t2Amount;\\n        (t1Amount, t2Amount) = _t1ToT2\\n            ? (\\n                _tokenAmount,\\n                (_tokenAmount * t2Price) / facetStorage().precisionMult\\n            )\\n            : (\\n                (_tokenAmount * t1Price) / facetStorage().precisionMult,\\n                _tokenAmount\\n            );\\n\\n        if (facetStorage().tokenPools[_pair].token1Amount < t1Amount) {\\n            uint256 tokenDiff = abs(\\n                int256(facetStorage().tokenPools[_pair].token1Amount) -\\n                    int256(t1Amount)\\n            );\\n            t1Amount = facetStorage().tokenPools[_pair].token1Amount;\\n            uint256 ratio = _t1ToT2\\n                ? (facetStorage().precisionMult * _tokenAmount) /\\n                    LibFacet\\n                    .facetStorage()\\n                    .liquidityShares[_pair][_user].t1Amount\\n                : (facetStorage().precisionMult * _tokenAmount) /\\n                    LibFacet\\n                    .facetStorage()\\n                    .liquidityShares[_pair][_user].t2Amount;\\n\\n            uint256 share = (ratio *\\n                LibFacet\\n                .facetStorage()\\n                .liquidityShares[_pair][_user].t2Amount) /\\n                facetStorage().precisionMult;\\n            t2Amount =\\n                share +\\n                ((tokenDiff * t2Price) / facetStorage().precisionMult);\\n        }\\n\\n        if (facetStorage().tokenPools[_pair].token2Amount < t2Amount) {\\n            uint256 tokenDiff = abs(\\n                int256(facetStorage().tokenPools[_pair].token2Amount) -\\n                    int256(t2Amount)\\n            );\\n            t2Amount = facetStorage().tokenPools[_pair].token2Amount;\\n            uint256 ratio = _t1ToT2\\n                ? (facetStorage().precisionMult * _tokenAmount) /\\n                    LibFacet\\n                    .facetStorage()\\n                    .liquidityShares[_pair][_user].t1Amount\\n                : (facetStorage().precisionMult * _tokenAmount) /\\n                    LibFacet\\n                    .facetStorage()\\n                    .liquidityShares[_pair][_user].t2Amount;\\n\\n            uint256 share = (ratio *\\n                LibFacet\\n                .facetStorage()\\n                .liquidityShares[_pair][_user].t1Amount) /\\n                facetStorage().precisionMult;\\n            t1Amount =\\n                share +\\n                ((tokenDiff * t1Price) / facetStorage().precisionMult);\\n        }\\n\\n        return (t1Amount, t2Amount);\\n    }\\n\\n    function getFeeBonus(string memory _pair, address _user)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 t1Stake;\\n        uint256 t2Stake;\\n        (t1Stake, t2Stake) = getLpShare(_pair, _user);\\n\\n        return (\\n            (facetStorage().tokenPools[_pair].t1Fees * t1Stake) /\\n                facetStorage().precisionMult,\\n            (facetStorage().tokenPools[_pair].t2Fees * t2Stake) /\\n                facetStorage().precisionMult\\n        );\\n    }\\n\\n    function sendWithdrawalAmounts(\\n        string memory _pair,\\n        bool _ethInPair,\\n        address _to,\\n        uint256 _t1Amount,\\n        uint256 _t2Amount,\\n        uint256 _t1Bonus,\\n        uint256 _t2Bonus\\n    ) internal {\\n        if (_ethInPair) {\\n            (bool success, ) = msg.sender.call{value: _t1Amount + _t1Bonus}(\\\"\\\");\\n            require(success, \\\"Error refunding ether.\\\");\\n        } else {\\n            ERC20(facetStorage().tokenPools[_pair].token1Con).transfer(\\n                _to,\\n                _t1Amount + _t1Bonus\\n            );\\n        }\\n        ERC20(facetStorage().tokenPools[_pair].token2Con).transfer(\\n            _to,\\n            _t2Amount + _t2Bonus\\n        );\\n    }\\n\\n    function withdrawShare(\\n        string memory _pair,\\n        address _to,\\n        uint256 _amount,\\n        bool _t1ToT2,\\n        bool _ethInPair\\n    ) internal {\\n        uint256 ratio = _t1ToT2\\n            ? (facetStorage().precisionMult * _amount) /\\n                facetStorage().liquidityShares[_pair][_to].t1Amount\\n            : (facetStorage().precisionMult * _amount) /\\n                facetStorage().liquidityShares[_pair][_to].t2Amount;\\n        (uint256 initT1Amount, uint256 initT2Amount) = _t1ToT2\\n            ? (\\n                _amount,\\n                (ratio *\\n                    LibFacet\\n                    .facetStorage()\\n                    .liquidityShares[_pair][_to].t2Amount) /\\n                    facetStorage().precisionMult\\n            )\\n            : (\\n                (ratio *\\n                    LibFacet\\n                    .facetStorage()\\n                    .liquidityShares[_pair][_to].t1Amount) /\\n                    facetStorage().precisionMult,\\n                _amount\\n            );\\n\\n        (uint256 t1Amount, uint256 t2Amount) = getNoFeeWithdrawAmounts(\\n            _pair,\\n            _to,\\n            _amount,\\n            true\\n        );\\n\\n        (uint256 t1Bonus, uint256 t2Bonus) = getFeeBonus(_pair, _to);\\n        facetStorage().tokenPools[_pair].t1Fees -= t1Bonus;\\n        facetStorage().tokenPools[_pair].t2Fees -= t2Bonus;\\n\\n        LibFacet\\n        .facetStorage()\\n        .liquidityShares[_pair][_to].t1Amount -= initT1Amount;\\n        LibFacet\\n        .facetStorage()\\n        .liquidityShares[_pair][_to].t2Amount -= initT2Amount;\\n\\n        console.log(facetStorage().tokenPools[_pair].token1Amount);\\n        console.log(t1Amount);\\n        console.log(facetStorage().tokenPools[_pair].token2Amount);\\n        console.log(t2Amount);\\n        facetStorage().tokenPools[_pair].token1Amount -= t1Amount;\\n        facetStorage().tokenPools[_pair].token2Amount -= t2Amount;\\n\\n        LibFacet.sendWithdrawalAmounts(\\n            _pair,\\n            _ethInPair,\\n            _to,\\n            t1Amount,\\n            t2Amount,\\n            t1Bonus,\\n            t2Bonus\\n        );\\n    }\\n\\n    function estimateDeposit(\\n        string memory _pair,\\n        uint256 _tokenAmount,\\n        bool _t1ToT2\\n    ) internal view returns (uint256[2] memory) {\\n        LibFacet.PairPool memory pool = LibFacet.facetStorage().tokenPools[\\n            _pair\\n        ];\\n        if (!LibFacet.poolIsSeeded(_pair))\\n            return\\n                _t1ToT2\\n                    ? [\\n                        _tokenAmount,\\n                        (((LibFacet.facetStorage().precisionMult *\\n                            LibFacet.facetStorage().priceFeed.getPrice(\\n                                pool.token1Con\\n                            )) /\\n                            LibFacet.facetStorage().priceFeed.getPrice(\\n                                pool.token2Con\\n                            )) * _tokenAmount) /\\n                            LibFacet.facetStorage().precisionMult\\n                    ]\\n                    : [\\n                        (((LibFacet.facetStorage().precisionMult *\\n                            LibFacet.facetStorage().priceFeed.getPrice(\\n                                pool.token2Con\\n                            )) /\\n                            LibFacet.facetStorage().priceFeed.getPrice(\\n                                pool.token1Con\\n                            )) * _tokenAmount) /\\n                            LibFacet.facetStorage().precisionMult,\\n                        _tokenAmount\\n                    ];\\n\\n        if (_t1ToT2) {\\n            uint256 initPrice = (LibFacet.facetStorage().precisionMult *\\n                pool.token2Seed) / pool.token1Seed;\\n            uint256 tokenIn = ((((pool.token1Amount + _tokenAmount) *\\n                initPrice) / facetStorage().precisionMult) - pool.token2Amount);\\n            return [_tokenAmount, tokenIn];\\n        } else {\\n            uint256 initPrice = (LibFacet.facetStorage().precisionMult *\\n                pool.token1Seed) / pool.token2Seed;\\n            uint256 tokenIn = ((((pool.token2Amount + _tokenAmount) *\\n                initPrice) / LibFacet.facetStorage().precisionMult) -\\n                pool.token1Amount);\\n            return [tokenIn, _tokenAmount];\\n        }\\n    }\\n\\n    function getRelativePrice(\\n        string memory _pair,\\n        uint256 _tokenAmount,\\n        bool _t1ToT2\\n    ) internal view returns (uint256) {\\n        LibFacet.PairPool memory pool = LibFacet.facetStorage().tokenPools[\\n            _pair\\n        ];\\n        uint256 fee = _tokenAmount / LibFacet.facetStorage().feeDivisor;\\n        uint256 invariant = pool.token1Amount * pool.token2Amount;\\n\\n        return\\n            _t1ToT2\\n                ? pool.token2Amount -\\n                    (invariant / (pool.token1Amount + _tokenAmount - fee))\\n                : pool.token1Amount -\\n                    (invariant / (pool.token2Amount + _tokenAmount - fee));\\n    }\\n\\n    function estimateWithdrawAmounts(\\n        string memory _pair,\\n        uint256 _tokenAmount,\\n        bool _t1ToT2\\n    ) internal view returns (uint256, uint256) {\\n        uint256 t1Amount;\\n        uint256 t2Amount;\\n        (t1Amount, t2Amount) = getNoFeeWithdrawAmounts(\\n            _pair,\\n            msg.sender,\\n            _tokenAmount,\\n            _t1ToT2\\n        );\\n        uint256 t1Bonus;\\n        uint256 t2Bonus;\\n        (t1Bonus, t2Bonus) = getFeeBonus(_pair, msg.sender);\\n\\n        return (t1Amount + t1Bonus, t2Amount + t2Bonus);\\n    }\\n}\\n\\ncontract Modifiers {\\n    modifier poolCreated(string memory _pair) {\\n        require(\\n            LibFacet.facetStorage().tokenPools[_pair].created,\\n            \\\"There is no such token contract YET deployed in our system.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier hasTokens(\\n        string memory _pair,\\n        uint256 _contractNumber,\\n        uint256 _tokenAmount\\n    ) {\\n        address contractAddress = _contractNumber == 1\\n            ? LibFacet.facetStorage().tokenPools[_pair].token1Con\\n            : LibFacet.facetStorage().tokenPools[_pair].token2Con;\\n        require(\\n            ERC20(contractAddress).balanceOf(msg.sender) >= _tokenAmount,\\n            \\\"Insufficient ERC20 funds.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isShareHolder(string memory _pair) {\\n        require(\\n            LibFacet\\n            .facetStorage()\\n            .liquidityShares[_pair][msg.sender].t1Amount >\\n                0 &&\\n                LibFacet\\n                .facetStorage()\\n                .liquidityShares[_pair][msg.sender].t2Amount >\\n                0,\\n            \\\"Only shareholders of the liquidity pool can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier hasShares(\\n        string memory _pair,\\n        uint256 _share,\\n        bool _t1ToT2\\n    ) {\\n        require(\\n            _t1ToT2\\n                ? LibFacet\\n                .facetStorage()\\n                .liquidityShares[_pair][msg.sender].t1Amount >= _share\\n                : LibFacet\\n                .facetStorage()\\n                .liquidityShares[_pair][msg.sender].t2Amount >= _share,\\n            \\\"Cannot withdraw more than has been deposited.\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xeba7d51b0e030845661cfb9d29867e5385d17ca6e56f68fee273576400c87fa4\",\"license\":\"No-License\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600c81526020016b04552433230546f45524332360a41b815250604051806040016040528060048152602001631155115560e21b815250816003908162000065919062000122565b50600462000074828262000122565b505050620001ee565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000a857607f821691505b602082108103620000c957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200011d57600081815260208120601f850160051c81016020861015620000f85750805b601f850160051c820191505b81811015620001195782815560010162000104565b5050505b505050565b81516001600160401b038111156200013e576200013e6200007d565b62000156816200014f845462000093565b84620000cf565b602080601f8311600181146200018e5760008415620001755750858301515b600019600386901b1c1916600185901b17855562000119565b600085815260208120601f198616915b82811015620001bf578886015182559484019460019091019084016200019e565b5085821015620001de5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6134aa80620001fe6000396000f3fe608060405234801561001057600080fd5b50600436106100fc5760003560e01c806306fdde0314610101578063095ea7b31461011f57806318160ddd1461014257806323b872dd146101545780632af1eedc1461016757806330ad9f141461017c578063313ce567146101a457806339509351146101b357806343c69239146101c657806347df9bf1146101d957806357e161f5146101ec57806370a08231146101ff57806395d89b41146102285780639cd0546a14610230578063a457c2d714610243578063a9059cbb14610256578063bad2b95314610269578063dd62ed3e14610289578063e72d02e81461029c578063f0ad345d146102af575b600080fd5b6101096102c2565b6040516101169190612e9c565b60405180910390f35b61013261012d366004612eeb565b610354565b6040519015158152602001610116565b6002545b604051908152602001610116565b610132610162366004612f15565b61036e565b61017a610175366004612ff3565b610394565b005b61018f61018a36600461304e565b610a3e565b60408051928352602083019190915201610116565b60405160128152602001610116565b6101326101c1366004612eeb565b610a58565b6101466101d436600461304e565b610a7a565b6101326101e73660046130a8565b610a8f565b61018f6101fa3660046130a8565b610ac6565b61014661020d3660046130dc565b6001600160a01b031660009081526020819052604090205490565b610109610adb565b61018f61023e3660046130a8565b610aea565b610132610251366004612eeb565b610b64565b610132610264366004612eeb565b610bea565b61027c61027736600461304e565b610bf8565b60405161011691906130f7565b610146610297366004613128565b610c0b565b61017a6102aa36600461304e565b610c36565b61017a6102bd36600461304e565b610c49565b6060600380546102d19061315b565b80601f01602080910402602001604051908101604052809291908181526020018280546102fd9061315b565b801561034a5780601f1061031f5761010080835404028352916020019161034a565b820191906000526020600020905b81548152906001019060200180831161032d57829003601f168201915b5050505050905090565b6000336103628185856112f4565b60019150505b92915050565b60003361037c858285611418565b610387858585611492565b60019150505b9392505050565b8261039d611660565b600101816040516103ae9190613195565b908152604051908190036020019020600a015460ff166104395760405162461bcd60e51b815260206004820152603b60248201527f5468657265206973206e6f207375636820746f6b656e20636f6e74726163742060448201527a2ca2aa103232b83637bcb2b21034b71037bab91039bcb9ba32b69760291b60648201526084015b60405180910390fd5b836001846000610447611660565b600101846040516104589190613195565b908152604051908190036020018120600201546370a0823160e01b82526001600160a01b03169150829082906370a08231906104989033906004016131b1565b602060405180830381865afa1580156104b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d991906131c5565b10156104f75760405162461bcd60e51b8152600401610430906131de565b876002876000610505611660565b600101846040516105169190613195565b908152604051908190036020018120600301546370a0823160e01b82526001600160a01b03169150829082906370a08231906105569033906004016131b1565b602060405180830381865afa158015610573573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059791906131c5565b10156105b55760405162461bcd60e51b8152600401610430906131de565b60006105c38d8d6001610bf8565b6020015190506402540be4006105e16105dc8d8461323d565b611683565b1061065e5760405162461bcd60e51b815260206004820152604160248201527f416d6f756e7420696e736572746564206973206e6f742068656c70696e67207460448201527f686520706f6f6c2067657420746f20657175696c69627269756d2073746174656064820152601760f91b608482015260a401610430565b610666611660565b6001018d6040516106779190613195565b908152602001604051809103902060020160009054906101000a90046001600160a01b03166001600160a01b03166323b872dd33308f6040518463ffffffff1660e01b81526004016106cb93929190613264565b6020604051808303816000875af11580156106ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070e9190613288565b50610717611660565b6001018d6040516107289190613195565b908152602001604051809103902060030160009054906101000a90046001600160a01b03166001600160a01b03166323b872dd33308e6040518463ffffffff1660e01b815260040161077c93929190613264565b6020604051808303816000875af115801561079b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf9190613288565b508b6107c9611660565b6001018e6040516107da9190613195565b908152602001604051809103902060040160008282546107fa91906132a5565b909155508b9050610809611660565b6001018e60405161081a9190613195565b9081526020016040518091039020600501600082825461083a91906132a5565b909155506108489050611660565b6002018d6040516108599190613195565b908152604080516020928190038301902033600090815292529020541580156108b75750610885611660565b6002018d6040516108969190613195565b90815260408051602092819003830190203360009081529252902060010154155b15610909576108c4611660565b6003018d6040516108d59190613195565b908152604051908190036020908101909120805460018101825560009182529190200180546001600160a01b031916331790555b8b610912611660565b6002018e6040516109239190613195565b908152604080516020928190038301902033600090815292528120805490919061094e9084906132a5565b909155508b905061095d611660565b6002018e60405161096e9190613195565b908152604080516020928190038301902033600090815292528120600101805490919061099c9084906132a5565b909155506109aa9050611660565b6001018d6040516109bb9190613195565b908152602001604051809103902060060154600003610a2f578b6109dd611660565b6001018e6040516109ee9190613195565b908152604051908190036020019020600601558a610a0a611660565b6001018e604051610a1b9190613195565b908152604051908190036020019020600701555b50505050505050505050505050565b600080610a4c85858561169f565b91509150935093915050565b600033610362818585610a6b8383610c0b565b610a7591906132a5565b6112f4565b6000610a878484846116ec565b949350505050565b6000610a99611660565b60010182604051610aaa9190613195565b908152604051908190036020019020600a015460ff1692915050565b600080610ad283611965565b91509150915091565b6060600480546102d19061315b565b600080610af5611660565b60020183604051610b069190613195565b90815260408051602092819003830190203360009081529252902054610b2a611660565b60020184604051610b3b9190613195565b908152604080516020928190038301902033600090815292529020600101549094909350915050565b60003381610b728286610c0b565b905083811015610bd25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610430565b610bdf82868684036112f4565b506001949350505050565b600033610362818585611492565b610c00612e5a565b610a87848484611ab7565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610c44833384846000612060565b505050565b80610ceb5781610c57611660565b60010184604051610c689190613195565b908152604051908190036020018120600301546370a0823160e01b82526001600160a01b0316906370a0823190610ca39033906004016131b1565b602060405180830381865afa158015610cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce491906131c5565b1015610d84565b81610cf4611660565b60010184604051610d059190613195565b908152604051908190036020018120600201546370a0823160e01b82526001600160a01b0316906370a0823190610d409033906004016131b1565b602060405180830381865afa158015610d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8191906131c5565b10155b610dce5760405162461bcd60e51b815260206004820152601b60248201527a24b739bab33334b1b4b2b73a1022a9219918103130b630b731b29760291b6044820152606401610430565b6000610dd8611660565b60010184604051610de99190613195565b908152602001604051809103902060405180610160016040529081600082018054610e139061315b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3f9061315b565b8015610e8c5780601f10610e6157610100808354040283529160200191610e8c565b820191906000526020600020905b815481529060010190602001808311610e6f57829003601f168201915b50505050508152602001600182018054610ea59061315b565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed19061315b565b8015610f1e5780601f10610ef357610100808354040283529160200191610f1e565b820191906000526020600020905b815481529060010190602001808311610f0157829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e08201526009820154610100820152600a9091015460ff1615156101209091015290506000610fa56101f4856132b8565b905060008260a001518360800151610fbd91906132da565b90506000806000861561100957878660800151610fda91906132a5565b9250610fe685846132f1565b610ff090856132b8565b9150818660a0015161100291906132f1565b9050611044565b878660a0015161101991906132a5565b915061102585836132f1565b61102f90856132b8565b925082866080015161104191906132f1565b90505b6080860183905260a086018290528561105b611660565b6001018a60405161106c9190613195565b908152604051908190036020019020815181906110899082613352565b506020820151600182019061109e9082613352565b5060408201516002820180546001600160a01b039283166001600160a01b03199182161790915560608401516003840180549190931691161790556080820151600482015560a0820151600582015560c0820151600682015560e082015160078201556101008201516008820155610120820151600982015561014090910151600a909101805491151560ff1990921691909117905560008761114557866060015161114b565b86604001515b905060008861115e578760400151611164565b87606001515b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd9061119790339030908f90600401613264565b6020604051808303816000875af11580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da9190613288565b5060405163a9059cbb60e01b81526001600160a01b0382169063a9059cbb906112099033908790600401613411565b6020604051808303816000875af1158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c9190613288565b5086611256611660565b6001018c6040516112679190613195565b9081526020016040518091039020600801600082825461128791906132a5565b90915550859050611296611660565b6001018c6040516112a79190613195565b90815260405190819003602001902060040155836112c3611660565b6001018c6040516112d49190613195565b908152604051908190036020019020600501555050505050505050505050565b6001600160a01b0383166113565760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610430565b6001600160a01b0382166113b75760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610430565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006114248484610c0b565b9050600019811461148c578181101561147f5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610430565b61148c84848484036112f4565b50505050565b6001600160a01b0383166114f65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610430565b6001600160a01b0382166115585760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610430565b6001600160a01b038316600090815260208190526040902054818110156115d05760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610430565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906116079084906132a5565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161165391815260200190565b60405180910390a361148c565b7e5661492dcd9d3c02dbd3b7e7855c55a879f698c500b1c9587676404c7e9c7490565b60008082121561169b576116968261342a565b610368565b5090565b6000806000806116b187338888612472565b90925090506000806116c389336129e8565b90925090506116d282856132a5565b6116dc82856132a5565b9550955050505050935093915050565b6000806116f7611660565b600101856040516117089190613195565b9081526020016040518091039020604051806101600160405290816000820180546117329061315b565b80601f016020809104026020016040519081016040528092919081815260200182805461175e9061315b565b80156117ab5780601f10611780576101008083540402835291602001916117ab565b820191906000526020600020905b81548152906001019060200180831161178e57829003601f168201915b505050505081526020016001820180546117c49061315b565b80601f01602080910402602001604051908101604052809291908181526020018280546117f09061315b565b801561183d5780601f106118125761010080835404028352916020019161183d565b820191906000526020600020905b81548152906001019060200180831161182057829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e08201526009820154610100820152600a9091015460ff16151561012090910152905060006118c0611660565b600501546118ce90866132b8565b905060008260a0015183608001516118e691906132da565b9050846119265781868460a001516118fe91906132a5565b61190891906132f1565b61191290826132b8565b836080015161192191906132f1565b61195a565b8186846080015161193791906132a5565b61194191906132f1565b61194b90826132b8565b8360a0015161195a91906132f1565b979650505050505050565b60008060008060005b611976611660565b600301866040516119879190613195565b908152604051908190036020019020546001600160801b0382161015611aac5760006119b1611660565b600301876040516119c29190613195565b9081526020016040518091039020826001600160801b0316815481106119ea576119ea613211565b6000918252602090912001546001600160a01b03169050611a09611660565b60020187604051611a1a9190613195565b90815260408051602092819003830190206001600160a01b03841660009081529252902054611a4990856132a5565b9350611a53611660565b60020187604051611a649190613195565b90815260408051602092819003830190206001600160a01b03841660009081529252902060010154611a9690846132a5565b9250508080611aa490613446565b91505061196e565b509094909350915050565b611abf612e5a565b6000611ac9611660565b60010185604051611ada9190613195565b908152602001604051809103902060405180610160016040529081600082018054611b049061315b565b80601f0160208091040260200160405190810160405280929190818152602001828054611b309061315b565b8015611b7d5780601f10611b5257610100808354040283529160200191611b7d565b820191906000526020600020905b815481529060010190602001808311611b6057829003601f168201915b50505050508152602001600182018054611b969061315b565b80601f0160208091040260200160405190810160405280929190818152602001828054611bc29061315b565b8015611c0f5780601f10611be457610100808354040283529160200191611c0f565b820191906000526020600020905b815481529060010190602001808311611bf257829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e08201526009820154610100820152600a9091015460ff161515610120909101529050611c9185612aa2565b611f385782611de7576040518060400160405280611cad611660565b6006015486611cba611660565b5460408087015190516341976e0960e01b81526001600160a01b03909216916341976e0991611ceb916004016131b1565b602060405180830381865afa158015611d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2c91906131c5565b611d34611660565b5460608701516040516341976e0960e01b81526001600160a01b03909216916341976e0991611d65916004016131b1565b602060405180830381865afa158015611d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da691906131c5565b611dae611660565b60060154611dbc91906132da565b611dc691906132b8565b611dd091906132da565b611dda91906132b8565b8152602001859052611f30565b6040518060400160405280858152602001611e00611660565b6006015486611e0d611660565b5460608601516040516341976e0960e01b81526001600160a01b03909216916341976e0991611e3e916004016131b1565b602060405180830381865afa158015611e5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7f91906131c5565b611e87611660565b5460408088015190516341976e0960e01b81526001600160a01b03909216916341976e0991611eb8916004016131b1565b602060405180830381865afa158015611ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef991906131c5565b611f01611660565b60060154611f0f91906132da565b611f1991906132b8565b611f2391906132da565b611f2d91906132b8565b90525b91505061038d565b8215611fcf5760008160c001518260e00151611f52611660565b60060154611f6091906132da565b611f6a91906132b8565b905060008260a00151611f7b611660565b6006015483888660800151611f9091906132a5565b611f9a91906132da565b611fa491906132b8565b611fae91906132f1565b9050604051806040016040528087815260200182815250935050505061038d565b60008160e001518260c00151611fe3611660565b60060154611ff191906132da565b611ffb91906132b8565b90506000826080015161200c611660565b6006015483888660a0015161202191906132a5565b61202b91906132da565b61203591906132b8565b61203f91906132f1565b9050604051806040016040528082815260200187815250935050505061038d565b6000826120ce5761206f611660565b600201866040516120809190613195565b90815260408051602092819003830190206001600160a01b03881660009081529252902060010154846120b1611660565b600601546120bf91906132da565b6120c991906132b8565b61212d565b6120d6611660565b600201866040516120e79190613195565b90815260408051602092819003830190206001600160a01b0388166000908152925290205484612115611660565b6006015461212391906132da565b61212d91906132b8565b90506000808461219b5761213f611660565b6006015461214b611660565b6002018960405161215c9190613195565b90815260408051602092819003830190206001600160a01b038b166000908152925290205461218b90856132da565b61219591906132b8565b866121fd565b856121a4611660565b600601546121b0611660565b6002018a6040516121c19190613195565b90815260408051602092819003830190206001600160a01b038c16600090815292529020600101546121f390866132da565b6121fd91906132b8565b915091506000806122118a8a8a6001612472565b915091506000806122228c8c6129e8565b915091508161222f611660565b6001018d6040516122409190613195565b9081526020016040518091039020600801600082825461226091906132f1565b9091555081905061226f611660565b6001018d6040516122809190613195565b908152602001604051809103902060090160008282546122a091906132f1565b909155508690506122af611660565b6002018d6040516122c09190613195565b90815260408051602092819003830190206001600160a01b038f1660009081529252812080549091906122f49084906132f1565b90915550859050612303611660565b6002018d6040516123149190613195565b908152602001604051809103902060008d6001600160a01b03166001600160a01b03168152602001908152602001600020600101600082825461235791906132f1565b909155506123909050612368611660565b6001018d6040516123799190613195565b908152602001604051809103902060040154612b0d565b61239984612b0d565b6123cc6123a4611660565b6001018d6040516123b59190613195565b908152602001604051809103902060050154612b0d565b6123d583612b0d565b836123de611660565b6001018d6040516123ef9190613195565b9081526020016040518091039020600401600082825461240f91906132f1565b9091555083905061241e611660565b6001018d60405161242f9190613195565b9081526020016040518091039020600501600082825461244f91906132f1565b9091555061246490508c898d87878787612b55565b505050505050505050505050565b600080600061247f611660565b600101876040516124909190613195565b9081526020016040518091039020600601546124aa611660565b600101886040516124bb9190613195565b9081526020016040518091039020600701546124d5611660565b600601546124e391906132da565b6124ed91906132b8565b905060006124f9611660565b6001018860405161250a9190613195565b908152602001604051809103902060070154612524611660565b600101896040516125359190613195565b90815260200160405180910390206006015461254f611660565b6006015461255d91906132da565b61256791906132b8565b90506000808661259757612579611660565b60060154612587848a6132da565b61259191906132b8565b886125b8565b876125a0611660565b600601546125ae868b6132da565b6125b891906132b8565b9092509050816125c6611660565b6001018b6040516125d79190613195565b90815260200160405180910390206004015410156127cb57600061262a836125fd611660565b6001018d60405161260e9190613195565b9081526020016040518091039020600401546105dc919061323d565b9050612634611660565b6001018b6040516126459190613195565b90815260200160405180910390206004015492506000886126c757612668611660565b6002018c6040516126799190613195565b90815260408051602092819003830190206001600160a01b038e16600090815292529020600101548a6126aa611660565b600601546126b891906132da565b6126c291906132b8565b612726565b6126cf611660565b6002018c6040516126e09190613195565b90815260408051602092819003830190206001600160a01b038e16600090815292529020548a61270e611660565b6006015461271c91906132da565b61272691906132b8565b90506000612732611660565b6006015461273e611660565b6002018e60405161274f9190613195565b908152602001604051809103902060008e6001600160a01b03166001600160a01b03168152602001908152602001600020600101548361278f91906132da565b61279991906132b8565b90506127a3611660565b600601546127b188856132da565b6127bb91906132b8565b6127c590826132a5565b93505050505b806127d4611660565b6001018b6040516127e59190613195565b90815260200160405180910390206005015410156129d95760006128388261280b611660565b6001018d60405161281c9190613195565b9081526020016040518091039020600501546105dc919061323d565b9050612842611660565b6001018b6040516128539190613195565b90815260200160405180910390206005015491506000886128d557612876611660565b6002018c6040516128879190613195565b90815260408051602092819003830190206001600160a01b038e16600090815292529020600101548a6128b8611660565b600601546128c691906132da565b6128d091906132b8565b612934565b6128dd611660565b6002018c6040516128ee9190613195565b90815260408051602092819003830190206001600160a01b038e16600090815292529020548a61291c611660565b6006015461292a91906132da565b61293491906132b8565b90506000612940611660565b6006015461294c611660565b6002018e60405161295d9190613195565b908152602001604051809103902060008e6001600160a01b03166001600160a01b03168152602001908152602001600020600001548361299d91906132da565b6129a791906132b8565b90506129b1611660565b600601546129bf87856132da565b6129c991906132b8565b6129d390826132a5565b94505050505b90999098509650505050505050565b6000806000806129f88686612d4f565b9092509050612a05611660565b6006015482612a12611660565b60010188604051612a239190613195565b908152602001604051809103902060080154612a3f91906132da565b612a4991906132b8565b612a51611660565b6006015482612a5e611660565b60010189604051612a6f9190613195565b908152602001604051809103902060090154612a8b91906132da565b612a9591906132b8565b9350935050509250929050565b600080612aad611660565b90508060010183604051612ac19190613195565b90815260200160405180910390206006015460001415801561038d57508060010183604051612af09190613195565b908152602001604051809103902060070154600014159392505050565b612b5281604051602401612b2391815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b179052612e39565b50565b8515612bf957600033612b6884876132a5565b604051600081818185875af1925050503d8060008114612ba4576040519150601f19603f3d011682016040523d82523d6000602084013e612ba9565b606091505b5050905080612bf35760405162461bcd60e51b815260206004820152601660248201527522b93937b9103932b33ab73234b7339032ba3432b91760511b6044820152606401610430565b50612ca0565b612c01611660565b60010187604051612c129190613195565b908152604051908190036020019020600201546001600160a01b031663a9059cbb86612c3e85886132a5565b6040518363ffffffff1660e01b8152600401612c5b929190613411565b6020604051808303816000875af1158015612c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9e9190613288565b505b612ca8611660565b60010187604051612cb99190613195565b908152604051908190036020019020600301546001600160a01b031663a9059cbb86612ce584876132a5565b6040518363ffffffff1660e01b8152600401612d02929190613411565b6020604051808303816000875af1158015612d21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d459190613288565b5050505050505050565b600080600080612d5e86611965565b9092509050600082612d6e611660565b60020188604051612d7f9190613195565b90815260408051602092819003830190206001600160a01b038a1660009081529252902054612dac611660565b60060154612dba91906132da565b612dc491906132b8565b9050600082612dd1611660565b60020189604051612de29190613195565b90815260408051602092819003830190206001600160a01b038b1660009081529252902060010154612e12611660565b60060154612e2091906132da565b612e2a91906132b8565b91989197509095505050505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60405180604001604052806002906020820280368337509192915050565b60005b83811015612e93578181015183820152602001612e7b565b50506000910152565b6020815260008251806020840152612ebb816040850160208701612e78565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114612ee657600080fd5b919050565b60008060408385031215612efe57600080fd5b612f0783612ecf565b946020939093013593505050565b600080600060608486031215612f2a57600080fd5b612f3384612ecf565b9250612f4160208501612ecf565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612f7857600080fd5b81356001600160401b0380821115612f9257612f92612f51565b604051601f8301601f19908116603f01168101908282118183101715612fba57612fba612f51565b81604052838152866020858801011115612fd357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561300857600080fd5b83356001600160401b0381111561301e57600080fd5b61302a86828701612f67565b9660208601359650604090950135949350505050565b8015158114612b5257600080fd5b60008060006060848603121561306357600080fd5b83356001600160401b0381111561307957600080fd5b61308586828701612f67565b93505060208401359150604084013561309d81613040565b809150509250925092565b6000602082840312156130ba57600080fd5b81356001600160401b038111156130d057600080fd5b610a8784828501612f67565b6000602082840312156130ee57600080fd5b61038d82612ecf565b60408101818360005b600281101561311f578151835260209283019290910190600101613100565b50505092915050565b6000806040838503121561313b57600080fd5b61314483612ecf565b915061315260208401612ecf565b90509250929050565b600181811c9082168061316f57607f821691505b60208210810361318f57634e487b7160e01b600052602260045260246000fd5b50919050565b600082516131a7818460208701612e78565b9190910192915050565b6001600160a01b0391909116815260200190565b6000602082840312156131d757600080fd5b5051919050565b60208082526019908201527824b739bab33334b1b4b2b73a1022a921991810333ab732399760391b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103600083128015838313168383128216171561325d5761325d613227565b5092915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561329a57600080fd5b815161038d81613040565b8082018082111561036857610368613227565b6000826132d557634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761036857610368613227565b8181038181111561036857610368613227565b601f821115610c4457600081815260208120601f850160051c8101602086101561332b5750805b601f850160051c820191505b8181101561334a57828155600101613337565b505050505050565b81516001600160401b0381111561336b5761336b612f51565b61337f81613379845461315b565b84613304565b602080601f8311600181146133b4576000841561339c5750858301515b600019600386901b1c1916600185901b17855561334a565b600085815260208120601f198616915b828110156133e3578886015182559484019460019091019084016133c4565b50858210156134015787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03929092168252602082015260400190565b6000600160ff1b820161343f5761343f613227565b5060000390565b60006001600160801b038281166002600160801b0319810161346a5761346a613227565b600101939250505056fea2646970667358221220109bf7249b6f477f0e04efbb89f32fe82f23111fb1ce2a472a2217328aab77e764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100fc5760003560e01c806306fdde0314610101578063095ea7b31461011f57806318160ddd1461014257806323b872dd146101545780632af1eedc1461016757806330ad9f141461017c578063313ce567146101a457806339509351146101b357806343c69239146101c657806347df9bf1146101d957806357e161f5146101ec57806370a08231146101ff57806395d89b41146102285780639cd0546a14610230578063a457c2d714610243578063a9059cbb14610256578063bad2b95314610269578063dd62ed3e14610289578063e72d02e81461029c578063f0ad345d146102af575b600080fd5b6101096102c2565b6040516101169190612e9c565b60405180910390f35b61013261012d366004612eeb565b610354565b6040519015158152602001610116565b6002545b604051908152602001610116565b610132610162366004612f15565b61036e565b61017a610175366004612ff3565b610394565b005b61018f61018a36600461304e565b610a3e565b60408051928352602083019190915201610116565b60405160128152602001610116565b6101326101c1366004612eeb565b610a58565b6101466101d436600461304e565b610a7a565b6101326101e73660046130a8565b610a8f565b61018f6101fa3660046130a8565b610ac6565b61014661020d3660046130dc565b6001600160a01b031660009081526020819052604090205490565b610109610adb565b61018f61023e3660046130a8565b610aea565b610132610251366004612eeb565b610b64565b610132610264366004612eeb565b610bea565b61027c61027736600461304e565b610bf8565b60405161011691906130f7565b610146610297366004613128565b610c0b565b61017a6102aa36600461304e565b610c36565b61017a6102bd36600461304e565b610c49565b6060600380546102d19061315b565b80601f01602080910402602001604051908101604052809291908181526020018280546102fd9061315b565b801561034a5780601f1061031f5761010080835404028352916020019161034a565b820191906000526020600020905b81548152906001019060200180831161032d57829003601f168201915b5050505050905090565b6000336103628185856112f4565b60019150505b92915050565b60003361037c858285611418565b610387858585611492565b60019150505b9392505050565b8261039d611660565b600101816040516103ae9190613195565b908152604051908190036020019020600a015460ff166104395760405162461bcd60e51b815260206004820152603b60248201527f5468657265206973206e6f207375636820746f6b656e20636f6e74726163742060448201527a2ca2aa103232b83637bcb2b21034b71037bab91039bcb9ba32b69760291b60648201526084015b60405180910390fd5b836001846000610447611660565b600101846040516104589190613195565b908152604051908190036020018120600201546370a0823160e01b82526001600160a01b03169150829082906370a08231906104989033906004016131b1565b602060405180830381865afa1580156104b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d991906131c5565b10156104f75760405162461bcd60e51b8152600401610430906131de565b876002876000610505611660565b600101846040516105169190613195565b908152604051908190036020018120600301546370a0823160e01b82526001600160a01b03169150829082906370a08231906105569033906004016131b1565b602060405180830381865afa158015610573573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059791906131c5565b10156105b55760405162461bcd60e51b8152600401610430906131de565b60006105c38d8d6001610bf8565b6020015190506402540be4006105e16105dc8d8461323d565b611683565b1061065e5760405162461bcd60e51b815260206004820152604160248201527f416d6f756e7420696e736572746564206973206e6f742068656c70696e67207460448201527f686520706f6f6c2067657420746f20657175696c69627269756d2073746174656064820152601760f91b608482015260a401610430565b610666611660565b6001018d6040516106779190613195565b908152602001604051809103902060020160009054906101000a90046001600160a01b03166001600160a01b03166323b872dd33308f6040518463ffffffff1660e01b81526004016106cb93929190613264565b6020604051808303816000875af11580156106ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070e9190613288565b50610717611660565b6001018d6040516107289190613195565b908152602001604051809103902060030160009054906101000a90046001600160a01b03166001600160a01b03166323b872dd33308e6040518463ffffffff1660e01b815260040161077c93929190613264565b6020604051808303816000875af115801561079b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf9190613288565b508b6107c9611660565b6001018e6040516107da9190613195565b908152602001604051809103902060040160008282546107fa91906132a5565b909155508b9050610809611660565b6001018e60405161081a9190613195565b9081526020016040518091039020600501600082825461083a91906132a5565b909155506108489050611660565b6002018d6040516108599190613195565b908152604080516020928190038301902033600090815292529020541580156108b75750610885611660565b6002018d6040516108969190613195565b90815260408051602092819003830190203360009081529252902060010154155b15610909576108c4611660565b6003018d6040516108d59190613195565b908152604051908190036020908101909120805460018101825560009182529190200180546001600160a01b031916331790555b8b610912611660565b6002018e6040516109239190613195565b908152604080516020928190038301902033600090815292528120805490919061094e9084906132a5565b909155508b905061095d611660565b6002018e60405161096e9190613195565b908152604080516020928190038301902033600090815292528120600101805490919061099c9084906132a5565b909155506109aa9050611660565b6001018d6040516109bb9190613195565b908152602001604051809103902060060154600003610a2f578b6109dd611660565b6001018e6040516109ee9190613195565b908152604051908190036020019020600601558a610a0a611660565b6001018e604051610a1b9190613195565b908152604051908190036020019020600701555b50505050505050505050505050565b600080610a4c85858561169f565b91509150935093915050565b600033610362818585610a6b8383610c0b565b610a7591906132a5565b6112f4565b6000610a878484846116ec565b949350505050565b6000610a99611660565b60010182604051610aaa9190613195565b908152604051908190036020019020600a015460ff1692915050565b600080610ad283611965565b91509150915091565b6060600480546102d19061315b565b600080610af5611660565b60020183604051610b069190613195565b90815260408051602092819003830190203360009081529252902054610b2a611660565b60020184604051610b3b9190613195565b908152604080516020928190038301902033600090815292529020600101549094909350915050565b60003381610b728286610c0b565b905083811015610bd25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610430565b610bdf82868684036112f4565b506001949350505050565b600033610362818585611492565b610c00612e5a565b610a87848484611ab7565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610c44833384846000612060565b505050565b80610ceb5781610c57611660565b60010184604051610c689190613195565b908152604051908190036020018120600301546370a0823160e01b82526001600160a01b0316906370a0823190610ca39033906004016131b1565b602060405180830381865afa158015610cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce491906131c5565b1015610d84565b81610cf4611660565b60010184604051610d059190613195565b908152604051908190036020018120600201546370a0823160e01b82526001600160a01b0316906370a0823190610d409033906004016131b1565b602060405180830381865afa158015610d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8191906131c5565b10155b610dce5760405162461bcd60e51b815260206004820152601b60248201527a24b739bab33334b1b4b2b73a1022a9219918103130b630b731b29760291b6044820152606401610430565b6000610dd8611660565b60010184604051610de99190613195565b908152602001604051809103902060405180610160016040529081600082018054610e139061315b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3f9061315b565b8015610e8c5780601f10610e6157610100808354040283529160200191610e8c565b820191906000526020600020905b815481529060010190602001808311610e6f57829003601f168201915b50505050508152602001600182018054610ea59061315b565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed19061315b565b8015610f1e5780601f10610ef357610100808354040283529160200191610f1e565b820191906000526020600020905b815481529060010190602001808311610f0157829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e08201526009820154610100820152600a9091015460ff1615156101209091015290506000610fa56101f4856132b8565b905060008260a001518360800151610fbd91906132da565b90506000806000861561100957878660800151610fda91906132a5565b9250610fe685846132f1565b610ff090856132b8565b9150818660a0015161100291906132f1565b9050611044565b878660a0015161101991906132a5565b915061102585836132f1565b61102f90856132b8565b925082866080015161104191906132f1565b90505b6080860183905260a086018290528561105b611660565b6001018a60405161106c9190613195565b908152604051908190036020019020815181906110899082613352565b506020820151600182019061109e9082613352565b5060408201516002820180546001600160a01b039283166001600160a01b03199182161790915560608401516003840180549190931691161790556080820151600482015560a0820151600582015560c0820151600682015560e082015160078201556101008201516008820155610120820151600982015561014090910151600a909101805491151560ff1990921691909117905560008761114557866060015161114b565b86604001515b905060008861115e578760400151611164565b87606001515b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd9061119790339030908f90600401613264565b6020604051808303816000875af11580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da9190613288565b5060405163a9059cbb60e01b81526001600160a01b0382169063a9059cbb906112099033908790600401613411565b6020604051808303816000875af1158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c9190613288565b5086611256611660565b6001018c6040516112679190613195565b9081526020016040518091039020600801600082825461128791906132a5565b90915550859050611296611660565b6001018c6040516112a79190613195565b90815260405190819003602001902060040155836112c3611660565b6001018c6040516112d49190613195565b908152604051908190036020019020600501555050505050505050505050565b6001600160a01b0383166113565760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610430565b6001600160a01b0382166113b75760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610430565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006114248484610c0b565b9050600019811461148c578181101561147f5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610430565b61148c84848484036112f4565b50505050565b6001600160a01b0383166114f65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610430565b6001600160a01b0382166115585760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610430565b6001600160a01b038316600090815260208190526040902054818110156115d05760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610430565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906116079084906132a5565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161165391815260200190565b60405180910390a361148c565b7e5661492dcd9d3c02dbd3b7e7855c55a879f698c500b1c9587676404c7e9c7490565b60008082121561169b576116968261342a565b610368565b5090565b6000806000806116b187338888612472565b90925090506000806116c389336129e8565b90925090506116d282856132a5565b6116dc82856132a5565b9550955050505050935093915050565b6000806116f7611660565b600101856040516117089190613195565b9081526020016040518091039020604051806101600160405290816000820180546117329061315b565b80601f016020809104026020016040519081016040528092919081815260200182805461175e9061315b565b80156117ab5780601f10611780576101008083540402835291602001916117ab565b820191906000526020600020905b81548152906001019060200180831161178e57829003601f168201915b505050505081526020016001820180546117c49061315b565b80601f01602080910402602001604051908101604052809291908181526020018280546117f09061315b565b801561183d5780601f106118125761010080835404028352916020019161183d565b820191906000526020600020905b81548152906001019060200180831161182057829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e08201526009820154610100820152600a9091015460ff16151561012090910152905060006118c0611660565b600501546118ce90866132b8565b905060008260a0015183608001516118e691906132da565b9050846119265781868460a001516118fe91906132a5565b61190891906132f1565b61191290826132b8565b836080015161192191906132f1565b61195a565b8186846080015161193791906132a5565b61194191906132f1565b61194b90826132b8565b8360a0015161195a91906132f1565b979650505050505050565b60008060008060005b611976611660565b600301866040516119879190613195565b908152604051908190036020019020546001600160801b0382161015611aac5760006119b1611660565b600301876040516119c29190613195565b9081526020016040518091039020826001600160801b0316815481106119ea576119ea613211565b6000918252602090912001546001600160a01b03169050611a09611660565b60020187604051611a1a9190613195565b90815260408051602092819003830190206001600160a01b03841660009081529252902054611a4990856132a5565b9350611a53611660565b60020187604051611a649190613195565b90815260408051602092819003830190206001600160a01b03841660009081529252902060010154611a9690846132a5565b9250508080611aa490613446565b91505061196e565b509094909350915050565b611abf612e5a565b6000611ac9611660565b60010185604051611ada9190613195565b908152602001604051809103902060405180610160016040529081600082018054611b049061315b565b80601f0160208091040260200160405190810160405280929190818152602001828054611b309061315b565b8015611b7d5780601f10611b5257610100808354040283529160200191611b7d565b820191906000526020600020905b815481529060010190602001808311611b6057829003601f168201915b50505050508152602001600182018054611b969061315b565b80601f0160208091040260200160405190810160405280929190818152602001828054611bc29061315b565b8015611c0f5780601f10611be457610100808354040283529160200191611c0f565b820191906000526020600020905b815481529060010190602001808311611bf257829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e08201526009820154610100820152600a9091015460ff161515610120909101529050611c9185612aa2565b611f385782611de7576040518060400160405280611cad611660565b6006015486611cba611660565b5460408087015190516341976e0960e01b81526001600160a01b03909216916341976e0991611ceb916004016131b1565b602060405180830381865afa158015611d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2c91906131c5565b611d34611660565b5460608701516040516341976e0960e01b81526001600160a01b03909216916341976e0991611d65916004016131b1565b602060405180830381865afa158015611d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da691906131c5565b611dae611660565b60060154611dbc91906132da565b611dc691906132b8565b611dd091906132da565b611dda91906132b8565b8152602001859052611f30565b6040518060400160405280858152602001611e00611660565b6006015486611e0d611660565b5460608601516040516341976e0960e01b81526001600160a01b03909216916341976e0991611e3e916004016131b1565b602060405180830381865afa158015611e5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7f91906131c5565b611e87611660565b5460408088015190516341976e0960e01b81526001600160a01b03909216916341976e0991611eb8916004016131b1565b602060405180830381865afa158015611ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef991906131c5565b611f01611660565b60060154611f0f91906132da565b611f1991906132b8565b611f2391906132da565b611f2d91906132b8565b90525b91505061038d565b8215611fcf5760008160c001518260e00151611f52611660565b60060154611f6091906132da565b611f6a91906132b8565b905060008260a00151611f7b611660565b6006015483888660800151611f9091906132a5565b611f9a91906132da565b611fa491906132b8565b611fae91906132f1565b9050604051806040016040528087815260200182815250935050505061038d565b60008160e001518260c00151611fe3611660565b60060154611ff191906132da565b611ffb91906132b8565b90506000826080015161200c611660565b6006015483888660a0015161202191906132a5565b61202b91906132da565b61203591906132b8565b61203f91906132f1565b9050604051806040016040528082815260200187815250935050505061038d565b6000826120ce5761206f611660565b600201866040516120809190613195565b90815260408051602092819003830190206001600160a01b03881660009081529252902060010154846120b1611660565b600601546120bf91906132da565b6120c991906132b8565b61212d565b6120d6611660565b600201866040516120e79190613195565b90815260408051602092819003830190206001600160a01b0388166000908152925290205484612115611660565b6006015461212391906132da565b61212d91906132b8565b90506000808461219b5761213f611660565b6006015461214b611660565b6002018960405161215c9190613195565b90815260408051602092819003830190206001600160a01b038b166000908152925290205461218b90856132da565b61219591906132b8565b866121fd565b856121a4611660565b600601546121b0611660565b6002018a6040516121c19190613195565b90815260408051602092819003830190206001600160a01b038c16600090815292529020600101546121f390866132da565b6121fd91906132b8565b915091506000806122118a8a8a6001612472565b915091506000806122228c8c6129e8565b915091508161222f611660565b6001018d6040516122409190613195565b9081526020016040518091039020600801600082825461226091906132f1565b9091555081905061226f611660565b6001018d6040516122809190613195565b908152602001604051809103902060090160008282546122a091906132f1565b909155508690506122af611660565b6002018d6040516122c09190613195565b90815260408051602092819003830190206001600160a01b038f1660009081529252812080549091906122f49084906132f1565b90915550859050612303611660565b6002018d6040516123149190613195565b908152602001604051809103902060008d6001600160a01b03166001600160a01b03168152602001908152602001600020600101600082825461235791906132f1565b909155506123909050612368611660565b6001018d6040516123799190613195565b908152602001604051809103902060040154612b0d565b61239984612b0d565b6123cc6123a4611660565b6001018d6040516123b59190613195565b908152602001604051809103902060050154612b0d565b6123d583612b0d565b836123de611660565b6001018d6040516123ef9190613195565b9081526020016040518091039020600401600082825461240f91906132f1565b9091555083905061241e611660565b6001018d60405161242f9190613195565b9081526020016040518091039020600501600082825461244f91906132f1565b9091555061246490508c898d87878787612b55565b505050505050505050505050565b600080600061247f611660565b600101876040516124909190613195565b9081526020016040518091039020600601546124aa611660565b600101886040516124bb9190613195565b9081526020016040518091039020600701546124d5611660565b600601546124e391906132da565b6124ed91906132b8565b905060006124f9611660565b6001018860405161250a9190613195565b908152602001604051809103902060070154612524611660565b600101896040516125359190613195565b90815260200160405180910390206006015461254f611660565b6006015461255d91906132da565b61256791906132b8565b90506000808661259757612579611660565b60060154612587848a6132da565b61259191906132b8565b886125b8565b876125a0611660565b600601546125ae868b6132da565b6125b891906132b8565b9092509050816125c6611660565b6001018b6040516125d79190613195565b90815260200160405180910390206004015410156127cb57600061262a836125fd611660565b6001018d60405161260e9190613195565b9081526020016040518091039020600401546105dc919061323d565b9050612634611660565b6001018b6040516126459190613195565b90815260200160405180910390206004015492506000886126c757612668611660565b6002018c6040516126799190613195565b90815260408051602092819003830190206001600160a01b038e16600090815292529020600101548a6126aa611660565b600601546126b891906132da565b6126c291906132b8565b612726565b6126cf611660565b6002018c6040516126e09190613195565b90815260408051602092819003830190206001600160a01b038e16600090815292529020548a61270e611660565b6006015461271c91906132da565b61272691906132b8565b90506000612732611660565b6006015461273e611660565b6002018e60405161274f9190613195565b908152602001604051809103902060008e6001600160a01b03166001600160a01b03168152602001908152602001600020600101548361278f91906132da565b61279991906132b8565b90506127a3611660565b600601546127b188856132da565b6127bb91906132b8565b6127c590826132a5565b93505050505b806127d4611660565b6001018b6040516127e59190613195565b90815260200160405180910390206005015410156129d95760006128388261280b611660565b6001018d60405161281c9190613195565b9081526020016040518091039020600501546105dc919061323d565b9050612842611660565b6001018b6040516128539190613195565b90815260200160405180910390206005015491506000886128d557612876611660565b6002018c6040516128879190613195565b90815260408051602092819003830190206001600160a01b038e16600090815292529020600101548a6128b8611660565b600601546128c691906132da565b6128d091906132b8565b612934565b6128dd611660565b6002018c6040516128ee9190613195565b90815260408051602092819003830190206001600160a01b038e16600090815292529020548a61291c611660565b6006015461292a91906132da565b61293491906132b8565b90506000612940611660565b6006015461294c611660565b6002018e60405161295d9190613195565b908152602001604051809103902060008e6001600160a01b03166001600160a01b03168152602001908152602001600020600001548361299d91906132da565b6129a791906132b8565b90506129b1611660565b600601546129bf87856132da565b6129c991906132b8565b6129d390826132a5565b94505050505b90999098509650505050505050565b6000806000806129f88686612d4f565b9092509050612a05611660565b6006015482612a12611660565b60010188604051612a239190613195565b908152602001604051809103902060080154612a3f91906132da565b612a4991906132b8565b612a51611660565b6006015482612a5e611660565b60010189604051612a6f9190613195565b908152602001604051809103902060090154612a8b91906132da565b612a9591906132b8565b9350935050509250929050565b600080612aad611660565b90508060010183604051612ac19190613195565b90815260200160405180910390206006015460001415801561038d57508060010183604051612af09190613195565b908152602001604051809103902060070154600014159392505050565b612b5281604051602401612b2391815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b179052612e39565b50565b8515612bf957600033612b6884876132a5565b604051600081818185875af1925050503d8060008114612ba4576040519150601f19603f3d011682016040523d82523d6000602084013e612ba9565b606091505b5050905080612bf35760405162461bcd60e51b815260206004820152601660248201527522b93937b9103932b33ab73234b7339032ba3432b91760511b6044820152606401610430565b50612ca0565b612c01611660565b60010187604051612c129190613195565b908152604051908190036020019020600201546001600160a01b031663a9059cbb86612c3e85886132a5565b6040518363ffffffff1660e01b8152600401612c5b929190613411565b6020604051808303816000875af1158015612c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9e9190613288565b505b612ca8611660565b60010187604051612cb99190613195565b908152604051908190036020019020600301546001600160a01b031663a9059cbb86612ce584876132a5565b6040518363ffffffff1660e01b8152600401612d02929190613411565b6020604051808303816000875af1158015612d21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d459190613288565b5050505050505050565b600080600080612d5e86611965565b9092509050600082612d6e611660565b60020188604051612d7f9190613195565b90815260408051602092819003830190206001600160a01b038a1660009081529252902054612dac611660565b60060154612dba91906132da565b612dc491906132b8565b9050600082612dd1611660565b60020189604051612de29190613195565b90815260408051602092819003830190206001600160a01b038b1660009081529252902060010154612e12611660565b60060154612e2091906132da565b612e2a91906132b8565b91989197509095505050505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60405180604001604052806002906020820280368337509192915050565b60005b83811015612e93578181015183820152602001612e7b565b50506000910152565b6020815260008251806020840152612ebb816040850160208701612e78565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114612ee657600080fd5b919050565b60008060408385031215612efe57600080fd5b612f0783612ecf565b946020939093013593505050565b600080600060608486031215612f2a57600080fd5b612f3384612ecf565b9250612f4160208501612ecf565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612f7857600080fd5b81356001600160401b0380821115612f9257612f92612f51565b604051601f8301601f19908116603f01168101908282118183101715612fba57612fba612f51565b81604052838152866020858801011115612fd357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561300857600080fd5b83356001600160401b0381111561301e57600080fd5b61302a86828701612f67565b9660208601359650604090950135949350505050565b8015158114612b5257600080fd5b60008060006060848603121561306357600080fd5b83356001600160401b0381111561307957600080fd5b61308586828701612f67565b93505060208401359150604084013561309d81613040565b809150509250925092565b6000602082840312156130ba57600080fd5b81356001600160401b038111156130d057600080fd5b610a8784828501612f67565b6000602082840312156130ee57600080fd5b61038d82612ecf565b60408101818360005b600281101561311f578151835260209283019290910190600101613100565b50505092915050565b6000806040838503121561313b57600080fd5b61314483612ecf565b915061315260208401612ecf565b90509250929050565b600181811c9082168061316f57607f821691505b60208210810361318f57634e487b7160e01b600052602260045260246000fd5b50919050565b600082516131a7818460208701612e78565b9190910192915050565b6001600160a01b0391909116815260200190565b6000602082840312156131d757600080fd5b5051919050565b60208082526019908201527824b739bab33334b1b4b2b73a1022a921991810333ab732399760391b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103600083128015838313168383128216171561325d5761325d613227565b5092915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561329a57600080fd5b815161038d81613040565b8082018082111561036857610368613227565b6000826132d557634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761036857610368613227565b8181038181111561036857610368613227565b601f821115610c4457600081815260208120601f850160051c8101602086101561332b5750805b601f850160051c820191505b8181101561334a57828155600101613337565b505050505050565b81516001600160401b0381111561336b5761336b612f51565b61337f81613379845461315b565b84613304565b602080601f8311600181146133b4576000841561339c5750858301515b600019600386901b1c1916600185901b17855561334a565b600085815260208120601f198616915b828110156133e3578886015182559484019460019091019084016133c4565b50858210156134015787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03929092168252602082015260400190565b6000600160ff1b820161343f5761343f613227565b5060000390565b60006001600160801b038281166002600160801b0319810161346a5761346a613227565b600101939250505056fea2646970667358221220109bf7249b6f477f0e04efbb89f32fe82f23111fb1ce2a472a2217328aab77e764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 118,
        "contract": "contracts/ERC20ToERC20.sol:ERC20ToERC20",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 124,
        "contract": "contracts/ERC20ToERC20.sol:ERC20ToERC20",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 126,
        "contract": "contracts/ERC20ToERC20.sol:ERC20ToERC20",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 128,
        "contract": "contracts/ERC20ToERC20.sol:ERC20ToERC20",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 130,
        "contract": "contracts/ERC20ToERC20.sol:ERC20ToERC20",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}