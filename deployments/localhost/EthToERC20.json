{
  "address": "0x5eb3Bc0a489C5A8288765d2336659EbCA68FCd00",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Erc20ToEthSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositEthToErc",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_t1ToT2",
          "type": "bool"
        }
      ],
      "name": "estimateEthToErcDeposit",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_t1ToT2",
          "type": "bool"
        }
      ],
      "name": "estimateWithdrawAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        }
      ],
      "name": "ethToErc20Swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_t1ToT2",
          "type": "bool"
        }
      ],
      "name": "ethToErcWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLpShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        }
      ],
      "name": "getPoolDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_t1ToT2",
          "type": "bool"
        }
      ],
      "name": "getRelativePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pair",
          "type": "string"
        }
      ],
      "name": "getUserDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6769e361755af27c526f076661f8786e0c9e6db1668cce8243f7858f991436e3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5eb3Bc0a489C5A8288765d2336659EbCA68FCd00",
    "transactionIndex": 0,
    "gasUsed": "3263155",
    "logsBloom": "0x
    "blockHash": "0x7350c8aa15ec2a4714ddaa4daff104d0102a257c524b522b27048c1299e99af1",
    "transactionHash": "0x6769e361755af27c526f076661f8786e0c9e6db1668cce8243f7858f991436e3",
    "logs": [],
    "blockNumber": 61,
    "cumulativeGasUsed": "3263155",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c2e49921604f081b9a16f2cbcb720461",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Erc20ToEthSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositEthToErc\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_t1ToT2\",\"type\":\"bool\"}],\"name\":\"estimateEthToErcDeposit\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_t1ToT2\",\"type\":\"bool\"}],\"name\":\"estimateWithdrawAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"}],\"name\":\"ethToErc20Swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_t1ToT2\",\"type\":\"bool\"}],\"name\":\"ethToErcWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLpShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"}],\"name\":\"getPoolDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_t1ToT2\",\"type\":\"bool\"}],\"name\":\"getRelativePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pair\",\"type\":\"string\"}],\"name\":\"getUserDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EthToERC20.sol\":\"EthToERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/EthToERC20.sol\":{\"content\":\"// SPDX-License-Identifier: no-license\\npragma solidity 0.8.17;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./libraries/LibFacet.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract EthToERC20 is ERC20, Modifiers {\\n    constructor() ERC20(\\\"EthToErc\\\", \\\"E2E\\\") {}\\n\\n    function depositEthToErc(string memory _pair, uint256 _tokenAmount)\\n        external\\n        payable\\n        Modifiers.poolCreated(_pair)\\n        Modifiers.hasTokens(_pair, 2, _tokenAmount)\\n    {\\n        /// TODO: Does this work?\\n        uint256 tokenGoal = estimateEthToErcDeposit(_pair, msg.value, true)[1];\\n        require(\\n            abs(int256(tokenGoal) - int256(_tokenAmount)) < 10**10,\\n            \\\"Amount inserted is not helping the pool get to equilibrium state.\\\"\\n        );\\n\\n        ERC20(LibFacet.facetStorage().tokenPools[_pair].token2Con).transferFrom(\\n                msg.sender,\\n                address(this),\\n                _tokenAmount\\n            );\\n\\n        LibFacet.facetStorage().tokenPools[_pair].token1Amount += msg.value;\\n        LibFacet.facetStorage().tokenPools[_pair].token2Amount += _tokenAmount;\\n\\n        if (\\n            LibFacet\\n            .facetStorage()\\n            .liquidityShares[_pair][msg.sender].t1Amount ==\\n            0 &&\\n            LibFacet\\n            .facetStorage()\\n            .liquidityShares[_pair][msg.sender].t2Amount ==\\n            0\\n        ) LibFacet.facetStorage().liquidityProviders[_pair].push(msg.sender);\\n        LibFacet\\n        .facetStorage()\\n        .liquidityShares[_pair][msg.sender].t1Amount += msg.value;\\n        LibFacet\\n        .facetStorage()\\n        .liquidityShares[_pair][msg.sender].t2Amount += _tokenAmount;\\n\\n        if (LibFacet.facetStorage().tokenPools[_pair].token1Seed == 0) {\\n            LibFacet.facetStorage().tokenPools[_pair].token1Seed = msg.value;\\n            LibFacet.facetStorage().tokenPools[_pair].token2Seed = _tokenAmount;\\n        }\\n    }\\n\\n    function ethToErc20Swap(string memory _pair)\\n        external\\n        payable\\n        Modifiers.poolCreated(_pair)\\n    {\\n        LibFacet.PairPool memory pool = LibFacet.facetStorage().tokenPools[\\n            _pair\\n        ];\\n        uint256 fee = msg.value / LibFacet.facetStorage().feeDivisor;\\n        uint256 invariant = pool.token1Amount * pool.token2Amount;\\n        uint256 newEthAmount = pool.token1Amount + msg.value;\\n        uint256 newTokenAmount = invariant / (newEthAmount - fee);\\n        uint256 tokensOut = pool.token2Amount - newTokenAmount;\\n\\n        LibFacet.facetStorage().tokenPools[_pair].t1Fees += fee;\\n        LibFacet.facetStorage().tokenPools[_pair].token1Amount = newEthAmount;\\n        LibFacet.facetStorage().tokenPools[_pair].token2Amount = newTokenAmount;\\n\\n        ERC20(pool.token2Con).transfer(msg.sender, tokensOut);\\n    }\\n\\n    function Erc20ToEthSwap(\\n        string memory _pair,\\n        address _tokenContract,\\n        uint256 _tokenAmount\\n    ) external Modifiers.poolCreated(_pair) Modifiers.hasTokens(_pair, 1, _tokenAmount) {\\n        LibFacet.PairPool memory pool = LibFacet.facetStorage().tokenPools[\\n            _pair\\n        ];\\n        uint256 fee = _tokenAmount / LibFacet.facetStorage().feeDivisor;\\n        uint256 invariant = pool.token1Amount * pool.token2Amount;\\n        uint256 newTokenPool = pool.token2Amount + _tokenAmount;\\n        uint256 newEthPool = invariant / (newTokenPool - fee);\\n        uint256 ethOut = pool.token1Amount - newEthPool;\\n\\n        LibFacet.facetStorage().tokenPools[_pair].t2Fees += fee;\\n        LibFacet.facetStorage().tokenPools[_pair].token1Amount = newEthPool;\\n        LibFacet.facetStorage().tokenPools[_pair].token2Amount = newTokenPool;\\n\\n        ERC20(_tokenContract).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _tokenAmount\\n        );\\n\\n        (bool success, ) = msg.sender.call{value: ethOut}(\\\"\\\");\\n        require(success, \\\"Could not send eth.\\\");\\n    }\\n\\n    function ethToErcWithdraw(string memory _pair, uint256 _amount, bool _t1ToT2) external Modifiers.isShareHolder(_pair) Modifiers.hasShares(_pair, _amount, _t1ToT2) {\\n        LibFacet.withdrawShare(_pair, msg.sender, _amount, _t1ToT2, true);\\n    }\\n\\n    function estimateEthToErcDeposit(\\n        string memory _pair,\\n        uint256 _tokenAmount,\\n        bool _t1ToT2\\n    ) public view returns (uint256[2] memory) {\\n        return LibFacet.estimateDeposit(_pair, _tokenAmount, _t1ToT2);\\n    }\\n\\n    function getRelativePrice(\\n        string memory _pair,\\n        uint256 _tokenAmount,\\n        bool _t1ToT2\\n    ) external view Modifiers.poolCreated(_pair) returns (uint256) {\\n        return LibFacet.getRelativePrice(_pair, _tokenAmount, _t1ToT2);\\n    }\\n\\n    function getLpShare(string memory _pair, address _user)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n       return LibFacet.getLpShare(_pair, _user); \\n    }\\n\\n    function estimateWithdrawAmounts(\\n        string memory _pair,\\n        uint256 _tokenAmount,\\n        bool _t1ToT2\\n    ) external view returns (uint256, uint256) {\\n        return LibFacet.estimateWithdrawAmounts(_pair, _tokenAmount, _t1ToT2);\\n    }\\n\\n    function getPoolDeposits(string memory _pair) external view returns (uint256, uint256){\\n        return LibFacet.getPoolDeposits(_pair);\\n    }\\n\\n    function getUserDeposits(string memory _pair)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (\\n            LibFacet.facetStorage().liquidityShares[_pair][msg.sender].t1Amount,\\n            LibFacet.facetStorage().liquidityShares[_pair][msg.sender].t2Amount\\n        );\\n    }\\n\\n    function abs(int256 _x) internal pure returns (uint256) {\\n        return _x >= 0 ? uint256(_x) : uint256(-_x);\\n    }\\n\\n    function getPools() external view returns (string[] memory) {\\n        return LibFacet.facetStorage().pools;\\n    }\\n\\n    function getLiquidityProviders(string memory _pair)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        return LibFacet.facetStorage().liquidityProviders[_pair];\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xab7bdf43307aeb4dc67274f8265121708aaf2d19d7d63ef803a9bb0b78b48f09\",\"license\":\"no-license\"},\"contracts/PriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: no-license\\npragma solidity 0.8.17;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\ncontract PriceFeed {\\n    mapping(address => AggregatorV3Interface) priceFeeds;\\n\\n    constructor(\\n        address[] memory _tokenContracts,\\n        address[] memory _tokenAggregators\\n    ) {\\n        require(\\n            _tokenContracts.length == _tokenAggregators.length,\\n            \\\"Mismatch in amount of token contracts and token aggregators.\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _tokenContracts.length; i++) {\\n            address tokenContract = _tokenContracts[i];\\n            address tokenAggregator = _tokenAggregators[i];\\n            priceFeeds[tokenContract] = AggregatorV3Interface(tokenAggregator);\\n        }\\n    }\\n\\n    function getPrice(address _tokenContract) public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeeds[_tokenContract].latestRoundData();\\n        return uint256(price);\\n    }\\n}\\n\",\"keccak256\":\"0x4a9b267370e8fce7a2ed2100c2e428ace45d7f708a2f9e3d775ae3077e5feabe\",\"license\":\"no-license\"},\"contracts/libraries/LibFacet.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../PriceFeed.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary LibFacet {\\n    bytes32 constant FACET_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standart.facet.storage\\\");\\n\\n    struct LiquidityShare {\\n        uint256 t1Amount;\\n        uint256 t2Amount;\\n    }\\n\\n    struct PairPool {\\n        string token1;\\n        string token2;\\n        address token1Con;\\n        address token2Con;\\n        uint256 token1Amount;\\n        uint256 token2Amount;\\n        uint256 token1Seed;\\n        uint256 token2Seed;\\n        uint256 t1Fees;\\n        uint256 t2Fees;\\n        bool created;\\n    }\\n\\n    struct FacetStorage {\\n        PriceFeed priceFeed;\\n        mapping(string => PairPool) tokenPools;\\n        mapping(string => mapping(address => LiquidityShare)) liquidityShares;\\n        mapping(string => address[]) liquidityProviders;\\n        string[] pools;\\n        uint256 feeDivisor;\\n        uint256 precisionMult;\\n        LiquidityShare share;\\n        PairPool pool;\\n    }\\n\\n    function facetStorage() internal pure returns (FacetStorage storage fs) {\\n        bytes32 position = FACET_STORAGE_POSITION;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n\\n    function poolIsSeeded(string memory _pair) internal view returns (bool) {\\n        FacetStorage storage fs = facetStorage();\\n        return\\n            fs.tokenPools[_pair].token1Seed != 0 &&\\n            fs.tokenPools[_pair].token2Seed != 0;\\n    }\\n\\n    function abs(int256 _x) internal pure returns (uint256) {\\n        return _x >= 0 ? uint256(_x) : uint256(-_x);\\n    }\\n\\n    function getLpShare(string memory _pair, address _user)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 t1Total;\\n        uint256 t2Total;\\n        (t1Total, t2Total) = getPoolDeposits(_pair);\\n        uint256 t1Stake = (facetStorage().precisionMult *\\n            facetStorage().liquidityShares[_pair][_user].t1Amount) / t1Total;\\n        uint256 t2Stake = (facetStorage().precisionMult *\\n            facetStorage().liquidityShares[_pair][_user].t2Amount) / t2Total;\\n\\n        return (t1Stake, t2Stake);\\n    }\\n\\n    function getPoolDeposits(string memory _pair)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 t1Total = 0;\\n        uint256 t2Total = 0;\\n        for (\\n            uint128 i = 0;\\n            i < facetStorage().liquidityProviders[_pair].length;\\n            i++\\n        ) {\\n            address lp = facetStorage().liquidityProviders[_pair][i];\\n            t1Total += LibFacet\\n            .facetStorage()\\n            .liquidityShares[_pair][lp].t1Amount;\\n            t2Total += LibFacet\\n            .facetStorage()\\n            .liquidityShares[_pair][lp].t2Amount;\\n        }\\n\\n        return (t1Total, t2Total);\\n    }\\n\\n    function getNoFeeWithdrawAmounts(\\n        string memory _pair,\\n        address _user,\\n        uint256 _tokenAmount,\\n        bool _t1ToT2\\n    ) internal view returns (uint256, uint256) {\\n        uint256 t2Price = (facetStorage().precisionMult *\\n            facetStorage().tokenPools[_pair].token2Seed) /\\n            facetStorage().tokenPools[_pair].token1Seed;\\n        uint256 t1Price = (facetStorage().precisionMult *\\n            facetStorage().tokenPools[_pair].token1Seed) /\\n            facetStorage().tokenPools[_pair].token2Seed;\\n\\n        uint256 t1Amount;\\n        uint256 t2Amount;\\n        (t1Amount, t2Amount) = _t1ToT2\\n            ? (\\n                _tokenAmount,\\n                (_tokenAmount * t2Price) / facetStorage().precisionMult\\n            )\\n            : (\\n                (_tokenAmount * t1Price) / facetStorage().precisionMult,\\n                _tokenAmount\\n            );\\n\\n        if (facetStorage().tokenPools[_pair].token1Amount < t1Amount) {\\n            uint256 tokenDiff = abs(\\n                int256(facetStorage().tokenPools[_pair].token1Amount) -\\n                    int256(t1Amount)\\n            );\\n            t1Amount = facetStorage().tokenPools[_pair].token1Amount;\\n            uint256 ratio = _t1ToT2\\n                ? (facetStorage().precisionMult * _tokenAmount) /\\n                    LibFacet\\n                    .facetStorage()\\n                    .liquidityShares[_pair][_user].t1Amount\\n                : (facetStorage().precisionMult * _tokenAmount) /\\n                    LibFacet\\n                    .facetStorage()\\n                    .liquidityShares[_pair][_user].t2Amount;\\n\\n            uint256 share = (ratio *\\n                LibFacet\\n                .facetStorage()\\n                .liquidityShares[_pair][_user].t2Amount) /\\n                facetStorage().precisionMult;\\n            t2Amount =\\n                share +\\n                ((tokenDiff * t2Price) / facetStorage().precisionMult);\\n        }\\n\\n        if (facetStorage().tokenPools[_pair].token2Amount < t2Amount) {\\n            uint256 tokenDiff = abs(\\n                int256(facetStorage().tokenPools[_pair].token2Amount) -\\n                    int256(t2Amount)\\n            );\\n            t2Amount = facetStorage().tokenPools[_pair].token2Amount;\\n            uint256 ratio = _t1ToT2\\n                ? (facetStorage().precisionMult * _tokenAmount) /\\n                    LibFacet\\n                    .facetStorage()\\n                    .liquidityShares[_pair][_user].t1Amount\\n                : (facetStorage().precisionMult * _tokenAmount) /\\n                    LibFacet\\n                    .facetStorage()\\n                    .liquidityShares[_pair][_user].t2Amount;\\n\\n            uint256 share = (ratio *\\n                LibFacet\\n                .facetStorage()\\n                .liquidityShares[_pair][_user].t1Amount) /\\n                facetStorage().precisionMult;\\n            t1Amount =\\n                share +\\n                ((tokenDiff * t1Price) / facetStorage().precisionMult);\\n        }\\n\\n        return (t1Amount, t2Amount);\\n    }\\n\\n    function getFeeBonus(string memory _pair, address _user)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 t1Stake;\\n        uint256 t2Stake;\\n        (t1Stake, t2Stake) = getLpShare(_pair, _user);\\n\\n        return (\\n            (facetStorage().tokenPools[_pair].t1Fees * t1Stake) /\\n                facetStorage().precisionMult,\\n            (facetStorage().tokenPools[_pair].t2Fees * t2Stake) /\\n                facetStorage().precisionMult\\n        );\\n    }\\n\\n    function sendWithdrawalAmounts(\\n        string memory _pair,\\n        bool _ethInPair,\\n        address _to,\\n        uint256 _t1Amount,\\n        uint256 _t2Amount,\\n        uint256 _t1Bonus,\\n        uint256 _t2Bonus\\n    ) internal {\\n        if (_ethInPair) {\\n            (bool success, ) = msg.sender.call{value: _t1Amount + _t1Bonus}(\\\"\\\");\\n            require(success, \\\"Error refunding ether.\\\");\\n        } else {\\n            ERC20(facetStorage().tokenPools[_pair].token1Con).transfer(\\n                _to,\\n                _t1Amount + _t1Bonus\\n            );\\n        }\\n        ERC20(facetStorage().tokenPools[_pair].token2Con).transfer(\\n            _to,\\n            _t2Amount + _t2Bonus\\n        );\\n    }\\n\\n    function withdrawShare(\\n        string memory _pair,\\n        address _to,\\n        uint256 _amount,\\n        bool _t1ToT2,\\n        bool _ethInPair\\n    ) internal {\\n        uint256 ratio = _t1ToT2\\n            ? (facetStorage().precisionMult * _amount) /\\n                facetStorage().liquidityShares[_pair][_to].t1Amount\\n            : (facetStorage().precisionMult * _amount) /\\n                facetStorage().liquidityShares[_pair][_to].t2Amount;\\n        (uint256 initT1Amount, uint256 initT2Amount) = _t1ToT2\\n            ? (\\n                _amount,\\n                (ratio *\\n                    LibFacet\\n                    .facetStorage()\\n                    .liquidityShares[_pair][_to].t2Amount) /\\n                    facetStorage().precisionMult\\n            )\\n            : (\\n                (ratio *\\n                    LibFacet\\n                    .facetStorage()\\n                    .liquidityShares[_pair][_to].t1Amount) /\\n                    facetStorage().precisionMult,\\n                _amount\\n            );\\n\\n        (uint256 t1Amount, uint256 t2Amount) = getNoFeeWithdrawAmounts(\\n            _pair,\\n            _to,\\n            _amount,\\n            true\\n        );\\n\\n        (uint256 t1Bonus, uint256 t2Bonus) = getFeeBonus(_pair, _to);\\n        facetStorage().tokenPools[_pair].t1Fees -= t1Bonus;\\n        facetStorage().tokenPools[_pair].t2Fees -= t2Bonus;\\n\\n        LibFacet\\n        .facetStorage()\\n        .liquidityShares[_pair][_to].t1Amount -= initT1Amount;\\n        LibFacet\\n        .facetStorage()\\n        .liquidityShares[_pair][_to].t2Amount -= initT2Amount;\\n\\n        console.log(facetStorage().tokenPools[_pair].token1Amount);\\n        console.log(t1Amount);\\n        console.log(facetStorage().tokenPools[_pair].token2Amount);\\n        console.log(t2Amount);\\n        facetStorage().tokenPools[_pair].token1Amount -= t1Amount;\\n        facetStorage().tokenPools[_pair].token2Amount -= t2Amount;\\n\\n        LibFacet.sendWithdrawalAmounts(\\n            _pair,\\n            _ethInPair,\\n            _to,\\n            t1Amount,\\n            t2Amount,\\n            t1Bonus,\\n            t2Bonus\\n        );\\n    }\\n\\n    function estimateDeposit(\\n        string memory _pair,\\n        uint256 _tokenAmount,\\n        bool _t1ToT2\\n    ) internal view returns (uint256[2] memory) {\\n        LibFacet.PairPool memory pool = LibFacet.facetStorage().tokenPools[\\n            _pair\\n        ];\\n        if (!LibFacet.poolIsSeeded(_pair))\\n            return\\n                _t1ToT2\\n                    ? [\\n                        _tokenAmount,\\n                        (((LibFacet.facetStorage().precisionMult *\\n                            LibFacet.facetStorage().priceFeed.getPrice(\\n                                pool.token1Con\\n                            )) /\\n                            LibFacet.facetStorage().priceFeed.getPrice(\\n                                pool.token2Con\\n                            )) * _tokenAmount) /\\n                            LibFacet.facetStorage().precisionMult\\n                    ]\\n                    : [\\n                        (((LibFacet.facetStorage().precisionMult *\\n                            LibFacet.facetStorage().priceFeed.getPrice(\\n                                pool.token2Con\\n                            )) /\\n                            LibFacet.facetStorage().priceFeed.getPrice(\\n                                pool.token1Con\\n                            )) * _tokenAmount) /\\n                            LibFacet.facetStorage().precisionMult,\\n                        _tokenAmount\\n                    ];\\n\\n        if (_t1ToT2) {\\n            uint256 initPrice = (LibFacet.facetStorage().precisionMult *\\n                pool.token2Seed) / pool.token1Seed;\\n            uint256 tokenIn = ((((pool.token1Amount + _tokenAmount) *\\n                initPrice) / facetStorage().precisionMult) - pool.token2Amount);\\n            return [_tokenAmount, tokenIn];\\n        } else {\\n            uint256 initPrice = (LibFacet.facetStorage().precisionMult *\\n                pool.token1Seed) / pool.token2Seed;\\n            uint256 tokenIn = ((((pool.token2Amount + _tokenAmount) *\\n                initPrice) / LibFacet.facetStorage().precisionMult) -\\n                pool.token1Amount);\\n            return [tokenIn, _tokenAmount];\\n        }\\n    }\\n\\n    function getRelativePrice(\\n        string memory _pair,\\n        uint256 _tokenAmount,\\n        bool _t1ToT2\\n    ) internal view returns (uint256) {\\n        LibFacet.PairPool memory pool = LibFacet.facetStorage().tokenPools[\\n            _pair\\n        ];\\n        uint256 fee = _tokenAmount / LibFacet.facetStorage().feeDivisor;\\n        uint256 invariant = pool.token1Amount * pool.token2Amount;\\n\\n        return\\n            _t1ToT2\\n                ? pool.token2Amount -\\n                    (invariant / (pool.token1Amount + _tokenAmount - fee))\\n                : pool.token1Amount -\\n                    (invariant / (pool.token2Amount + _tokenAmount - fee));\\n    }\\n\\n    function estimateWithdrawAmounts(\\n        string memory _pair,\\n        uint256 _tokenAmount,\\n        bool _t1ToT2\\n    ) internal view returns (uint256, uint256) {\\n        uint256 t1Amount;\\n        uint256 t2Amount;\\n        (t1Amount, t2Amount) = getNoFeeWithdrawAmounts(\\n            _pair,\\n            msg.sender,\\n            _tokenAmount,\\n            _t1ToT2\\n        );\\n        uint256 t1Bonus;\\n        uint256 t2Bonus;\\n        (t1Bonus, t2Bonus) = getFeeBonus(_pair, msg.sender);\\n\\n        return (t1Amount + t1Bonus, t2Amount + t2Bonus);\\n    }\\n}\\n\\ncontract Modifiers {\\n    modifier poolCreated(string memory _pair) {\\n        require(\\n            LibFacet.facetStorage().tokenPools[_pair].created,\\n            \\\"There is no such token contract YET deployed in our system.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier hasTokens(\\n        string memory _pair,\\n        uint256 _contractNumber,\\n        uint256 _tokenAmount\\n    ) {\\n        address contractAddress = _contractNumber == 1\\n            ? LibFacet.facetStorage().tokenPools[_pair].token1Con\\n            : LibFacet.facetStorage().tokenPools[_pair].token2Con;\\n        require(\\n            ERC20(contractAddress).balanceOf(msg.sender) >= _tokenAmount,\\n            \\\"Insufficient ERC20 funds.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isShareHolder(string memory _pair) {\\n        require(\\n            LibFacet\\n            .facetStorage()\\n            .liquidityShares[_pair][msg.sender].t1Amount >\\n                0 &&\\n                LibFacet\\n                .facetStorage()\\n                .liquidityShares[_pair][msg.sender].t2Amount >\\n                0,\\n            \\\"Only shareholders of the liquidity pool can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier hasShares(\\n        string memory _pair,\\n        uint256 _share,\\n        bool _t1ToT2\\n    ) {\\n        require(\\n            _t1ToT2\\n                ? LibFacet\\n                .facetStorage()\\n                .liquidityShares[_pair][msg.sender].t1Amount >= _share\\n                : LibFacet\\n                .facetStorage()\\n                .liquidityShares[_pair][msg.sender].t2Amount >= _share,\\n            \\\"Cannot withdraw more than has been deposited.\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xeba7d51b0e030845661cfb9d29867e5385d17ca6e56f68fee273576400c87fa4\",\"license\":\"No-License\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405180604001604052806008815260200167457468546f45726360c01b8152506040518060400160405280600381526020016245324560e81b81525081600390816200006091906200011d565b5060046200006f82826200011d565b505050620001e9565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000a357607f821691505b602082108103620000c457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200011857600081815260208120601f850160051c81016020861015620000f35750805b601f850160051c820191505b818110156200011457828155600101620000ff565b5050505b505050565b81516001600160401b0381111562000139576200013962000078565b62000151816200014a84546200008e565b84620000ca565b602080601f831160018114620001895760008415620001705750858301515b600019600386901b1c1916600185901b17855562000114565b600085815260208120601f198616915b82811015620001ba5788860151825594840194600190910190840162000199565b5085821015620001d95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61391b80620001f96000396000f3fe6080604052600436106101095760003560e01c806306fdde0314610115578063095ea7b31461014057806318160ddd1461017057806323b872dd1461018f578063313ce567146101af57806335ec7514146101cb57806339509351146101ed5780633b8ee9701461020d57806343c692391461023a57806357e161f51461025a5780635f480f721461028f578063673a2a1f146102a257806370a08231146102c457806395d89b41146102fa5780639cd0546a1461030f578063a457c2d71461032f578063a9059cbb1461034f578063ad7b47531461036f578063b4f1f0e61461038f578063c6be6e4d146103a2578063dd62ed3e146103c2578063f2bf7787146103e257600080fd5b3661011057005b600080fd5b34801561012157600080fd5b5061012a610402565b60405161013791906132fc565b60405180910390f35b34801561014c57600080fd5b5061016061015b36600461332b565b610494565b6040519015158152602001610137565b34801561017c57600080fd5b506002545b604051908152602001610137565b34801561019b57600080fd5b506101606101aa366004613355565b6104ae565b3480156101bb57600080fd5b5060405160128152602001610137565b3480156101d757600080fd5b506101eb6101e6366004613433565b6104d4565b005b3480156101f957600080fd5b5061016061020836600461332b565b6109d1565b34801561021957600080fd5b5061022d610228366004613487565b6109f3565b60405161013791906134e1565b34801561024657600080fd5b50610181610255366004613487565b610a0e565b34801561026657600080fd5b5061027a610275366004613512565b610a70565b60408051928352602083019190915201610137565b6101eb61029d366004613512565b610a85565b3480156102ae57600080fd5b506102b7610e26565b6040516101379190613546565b3480156102d057600080fd5b506101816102df3660046135a8565b6001600160a01b031660009081526020819052604090205490565b34801561030657600080fd5b5061012a610f08565b34801561031b57600080fd5b5061027a61032a366004613512565b610f17565b34801561033b57600080fd5b5061016061034a36600461332b565b610f91565b34801561035b57600080fd5b5061016061036a36600461332b565b611017565b34801561037b57600080fd5b5061027a61038a366004613487565b611025565b6101eb61039d3660046135c3565b61103f565b3480156103ae57600080fd5b5061027a6103bd366004613607565b611507565b3480156103ce57600080fd5b506101816103dd366004613654565b61151f565b3480156103ee57600080fd5b506101eb6103fd366004613487565b61154a565b6060600380546104119061367e565b80601f016020809104026020016040519081016040528092919081815260200182805461043d9061367e565b801561048a5780601f1061045f5761010080835404028352916020019161048a565b820191906000526020600020905b81548152906001019060200180831161046d57829003601f168201915b5050505050905090565b6000336104a2818585611732565b60019150505b92915050565b6000336104bc858285611856565b6104c78585856118d0565b60019150505b9392505050565b826104dd611a9e565b600101816040516104ee91906136b8565b908152604051908190036020019020600a015460ff166105295760405162461bcd60e51b8152600401610520906136d4565b60405180910390fd5b836001836000610537611a9e565b6001018460405161054891906136b8565b908152604051908190036020018120600201546370a0823160e01b82526001600160a01b03169150829082906370a082319061058890339060040161372f565b602060405180830381865afa1580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190613743565b10156105e75760405162461bcd60e51b81526004016105209061375c565b60006105f1611a9e565b6001018960405161060291906136b8565b90815260200160405180910390206040518061016001604052908160008201805461062c9061367e565b80601f01602080910402602001604051908101604052809291908181526020018280546106589061367e565b80156106a55780601f1061067a576101008083540402835291602001916106a5565b820191906000526020600020905b81548152906001019060200180831161068857829003601f168201915b505050505081526020016001820180546106be9061367e565b80601f01602080910402602001604051908101604052809291908181526020018280546106ea9061367e565b80156107375780601f1061070c57610100808354040283529160200191610737565b820191906000526020600020905b81548152906001019060200180831161071a57829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e08201526009820154610100820152600a9091015460ff16151561012090910152905060006107ba611a9e565b600501546107c890896137a5565b905060008260a0015183608001516107e091906137c7565b90506000898460a001516107f491906137de565b9050600061080284836137f1565b61080c90846137a5565b9050600081866080015161082091906137f1565b90508461082b611a9e565b6001018f60405161083c91906136b8565b9081526020016040518091039020600901600082825461085c91906137de565b9091555082905061086b611a9e565b6001018f60405161087c91906136b8565b9081526040519081900360200190206004015582610898611a9e565b6001018f6040516108a991906136b8565b9081526020016040518091039020600501819055508c6001600160a01b03166323b872dd33308f6040518463ffffffff1660e01b81526004016108ee93929190613804565b6020604051808303816000875af115801561090d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109319190613828565b50604051600090339083908381818185875af1925050503d8060008114610974576040519150601f19603f3d011682016040523d82523d6000602084013e610979565b606091505b50509050806109c05760405162461bcd60e51b815260206004820152601360248201527221b7bab632103737ba1039b2b7321032ba341760691b6044820152606401610520565b505050505050505050505050505050565b6000336104a28185856109e4838361151f565b6109ee91906137de565b611732565b6109fb61328e565b610a06848484611ac1565b949350505050565b600083610a19611a9e565b60010181604051610a2a91906136b8565b908152604051908190036020019020600a015460ff16610a5c5760405162461bcd60e51b8152600401610520906136d4565b610a6785858561206a565b95945050505050565b600080610a7c836122e3565b91509150915091565b80610a8e611a9e565b60010181604051610a9f91906136b8565b908152604051908190036020019020600a015460ff16610ad15760405162461bcd60e51b8152600401610520906136d4565b6000610adb611a9e565b60010183604051610aec91906136b8565b908152602001604051809103902060405180610160016040529081600082018054610b169061367e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b429061367e565b8015610b8f5780601f10610b6457610100808354040283529160200191610b8f565b820191906000526020600020905b815481529060010190602001808311610b7257829003601f168201915b50505050508152602001600182018054610ba89061367e565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd49061367e565b8015610c215780601f10610bf657610100808354040283529160200191610c21565b820191906000526020600020905b815481529060010190602001808311610c0457829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e08201526009820154610100820152600a9091015460ff1615156101209091015290506000610ca4611a9e565b60050154610cb290346137a5565b905060008260a001518360800151610cca91906137c7565b90506000348460800151610cde91906137de565b90506000610cec84836137f1565b610cf690846137a5565b90506000818660a00151610d0a91906137f1565b905084610d15611a9e565b60010189604051610d2691906136b8565b90815260200160405180910390206008016000828254610d4691906137de565b90915550839050610d55611a9e565b60010189604051610d6691906136b8565b9081526040519081900360200190206004015581610d82611a9e565b60010189604051610d9391906136b8565b90815260405190819003602001812060050191909155606087015163a9059cbb60e01b82526001600160a01b03169063a9059cbb90610dd89033908590600401613845565b6020604051808303816000875af1158015610df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1b9190613828565b505050505050505050565b6060610e30611a9e565b600401805480602002602001604051908101604052809291908181526020016000905b82821015610eff578382906000526020600020018054610e729061367e565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9e9061367e565b8015610eeb5780601f10610ec057610100808354040283529160200191610eeb565b820191906000526020600020905b815481529060010190602001808311610ece57829003601f168201915b505050505081526020019060010190610e53565b50505050905090565b6060600480546104119061367e565b600080610f22611a9e565b60020183604051610f3391906136b8565b90815260408051602092819003830190203360009081529252902054610f57611a9e565b60020184604051610f6891906136b8565b908152604080516020928190038301902033600090815292529020600101549094909350915050565b60003381610f9f828661151f565b905083811015610fff5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610520565b61100c8286868403611732565b506001949350505050565b6000336104a28185856118d0565b600080611033858585612435565b91509150935093915050565b81611048611a9e565b6001018160405161105991906136b8565b908152604051908190036020019020600a015460ff1661108b5760405162461bcd60e51b8152600401610520906136d4565b826002836000611099611a9e565b600101846040516110aa91906136b8565b908152604051908190036020018120600301546370a0823160e01b82526001600160a01b03169150829082906370a08231906110ea90339060040161372f565b602060405180830381865afa158015611107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112b9190613743565b10156111495760405162461bcd60e51b81526004016105209061375c565b6000611157883460016109f3565b6020015190506402540be4006111756111708984613874565b612482565b106111f25760405162461bcd60e51b815260206004820152604160248201527f416d6f756e7420696e736572746564206973206e6f742068656c70696e67207460448201527f686520706f6f6c2067657420746f20657175696c69627269756d2073746174656064820152601760f91b608482015260a401610520565b6111fa611a9e565b6001018860405161120b91906136b8565b908152604051908190036020018120600301546323b872dd60e01b82526001600160a01b0316906323b872dd9061124a90339030908c90600401613804565b6020604051808303816000875af1158015611269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128d9190613828565b5034611297611a9e565b600101896040516112a891906136b8565b908152602001604051809103902060040160008282546112c891906137de565b909155508790506112d7611a9e565b600101896040516112e891906136b8565b9081526020016040518091039020600501600082825461130891906137de565b909155506113169050611a9e565b6002018860405161132791906136b8565b908152604080516020928190038301902033600090815292529020541580156113855750611353611a9e565b6002018860405161136491906136b8565b90815260408051602092819003830190203360009081529252902060010154155b156113d757611392611a9e565b600301886040516113a391906136b8565b908152604051908190036020908101909120805460018101825560009182529190200180546001600160a01b031916331790555b346113e0611a9e565b600201896040516113f191906136b8565b908152604080516020928190038301902033600090815292528120805490919061141c9084906137de565b9091555087905061142b611a9e565b6002018960405161143c91906136b8565b908152604080516020928190038301902033600090815292528120600101805490919061146a9084906137de565b909155506114789050611a9e565b6001018860405161148991906136b8565b9081526020016040518091039020600601546000036114fd57346114ab611a9e565b600101896040516114bc91906136b8565b90815260405190819003602001902060060155866114d8611a9e565b600101896040516114e991906136b8565b908152604051908190036020019020600701555b5050505050505050565b600080611514848461249e565b915091509250929050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b826000611555611a9e565b6002018260405161156691906136b8565b908152604080516020928190038301902033600090815292529020541180156115c657506000611594611a9e565b600201826040516115a591906136b8565b90815260408051602092819003830190203360009081529252902060010154115b6116385760405162461bcd60e51b815260206004820152603f60248201527f4f6e6c79207368617265686f6c64657273206f6620746865206c69717569646960448201527f747920706f6f6c2063616e2063616c6c20746869732066756e6374696f6e2e006064820152608401610520565b838383806116805781611649611a9e565b6002018460405161165a91906136b8565b9081526040805160209281900383019020336000908152925290206001015410156116b9565b81611689611a9e565b6002018460405161169a91906136b8565b9081526040805160209281900383019020336000908152925290205410155b61171b5760405162461bcd60e51b815260206004820152602d60248201527f43616e6e6f74207769746864726177206d6f7265207468616e2068617320626560448201526c32b7103232b837b9b4ba32b21760991b6064820152608401610520565b611729873388886001612588565b50505050505050565b6001600160a01b0383166117945760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610520565b6001600160a01b0382166117f55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610520565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000611862848461151f565b905060001981146118ca57818110156118bd5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610520565b6118ca8484848403611732565b50505050565b6001600160a01b0383166119345760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610520565b6001600160a01b0382166119965760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610520565b6001600160a01b03831660009081526020819052604090205481811015611a0e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610520565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611a459084906137de565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611a9191815260200190565b60405180910390a36118ca565b7e5661492dcd9d3c02dbd3b7e7855c55a879f698c500b1c9587676404c7e9c7490565b611ac961328e565b6000611ad3611a9e565b60010185604051611ae491906136b8565b908152602001604051809103902060405180610160016040529081600082018054611b0e9061367e565b80601f0160208091040260200160405190810160405280929190818152602001828054611b3a9061367e565b8015611b875780601f10611b5c57610100808354040283529160200191611b87565b820191906000526020600020905b815481529060010190602001808311611b6a57829003601f168201915b50505050508152602001600182018054611ba09061367e565b80601f0160208091040260200160405190810160405280929190818152602001828054611bcc9061367e565b8015611c195780601f10611bee57610100808354040283529160200191611c19565b820191906000526020600020905b815481529060010190602001808311611bfc57829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e08201526009820154610100820152600a9091015460ff161515610120909101529050611c9b8561299a565b611f425782611df1576040518060400160405280611cb7611a9e565b6006015486611cc4611a9e565b5460408087015190516341976e0960e01b81526001600160a01b03909216916341976e0991611cf59160040161372f565b602060405180830381865afa158015611d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d369190613743565b611d3e611a9e565b5460608701516040516341976e0960e01b81526001600160a01b03909216916341976e0991611d6f9160040161372f565b602060405180830381865afa158015611d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db09190613743565b611db8611a9e565b60060154611dc691906137c7565b611dd091906137a5565b611dda91906137c7565b611de491906137a5565b8152602001859052611f3a565b6040518060400160405280858152602001611e0a611a9e565b6006015486611e17611a9e565b5460608601516040516341976e0960e01b81526001600160a01b03909216916341976e0991611e489160040161372f565b602060405180830381865afa158015611e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e899190613743565b611e91611a9e565b5460408088015190516341976e0960e01b81526001600160a01b03909216916341976e0991611ec29160040161372f565b602060405180830381865afa158015611edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f039190613743565b611f0b611a9e565b60060154611f1991906137c7565b611f2391906137a5565b611f2d91906137c7565b611f3791906137a5565b90525b9150506104cd565b8215611fd95760008160c001518260e00151611f5c611a9e565b60060154611f6a91906137c7565b611f7491906137a5565b905060008260a00151611f85611a9e565b6006015483888660800151611f9a91906137de565b611fa491906137c7565b611fae91906137a5565b611fb891906137f1565b905060405180604001604052808781526020018281525093505050506104cd565b60008160e001518260c00151611fed611a9e565b60060154611ffb91906137c7565b61200591906137a5565b905060008260800151612016611a9e565b6006015483888660a0015161202b91906137de565b61203591906137c7565b61203f91906137a5565b61204991906137f1565b905060405180604001604052808281526020018781525093505050506104cd565b600080612075611a9e565b6001018560405161208691906136b8565b9081526020016040518091039020604051806101600160405290816000820180546120b09061367e565b80601f01602080910402602001604051908101604052809291908181526020018280546120dc9061367e565b80156121295780601f106120fe57610100808354040283529160200191612129565b820191906000526020600020905b81548152906001019060200180831161210c57829003601f168201915b505050505081526020016001820180546121429061367e565b80601f016020809104026020016040519081016040528092919081815260200182805461216e9061367e565b80156121bb5780601f10612190576101008083540402835291602001916121bb565b820191906000526020600020905b81548152906001019060200180831161219e57829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e08201526009820154610100820152600a9091015460ff161515610120909101529050600061223e611a9e565b6005015461224c90866137a5565b905060008260a00151836080015161226491906137c7565b9050846122a45781868460a0015161227c91906137de565b61228691906137f1565b61229090826137a5565b836080015161229f91906137f1565b6122d8565b818684608001516122b591906137de565b6122bf91906137f1565b6122c990826137a5565b8360a001516122d891906137f1565b979650505050505050565b60008060008060005b6122f4611a9e565b6003018660405161230591906136b8565b908152604051908190036020019020546001600160801b038216101561242a57600061232f611a9e565b6003018760405161234091906136b8565b9081526020016040518091039020826001600160801b0316815481106123685761236861385e565b6000918252602090912001546001600160a01b03169050612387611a9e565b6002018760405161239891906136b8565b90815260408051602092819003830190206001600160a01b038416600090815292529020546123c790856137de565b93506123d1611a9e565b600201876040516123e291906136b8565b90815260408051602092819003830190206001600160a01b0384166000908152925290206001015461241490846137de565b92505080806124229061389b565b9150506122ec565b509094909350915050565b60008060008061244787338888612a05565b90925090506000806124598933612f7b565b909250905061246882856137de565b61247282856137de565b9550955050505050935093915050565b60008082121561249a57612495826138c9565b6104a8565b5090565b6000806000806124ad866122e3565b90925090506000826124bd611a9e565b600201886040516124ce91906136b8565b90815260408051602092819003830190206001600160a01b038a16600090815292529020546124fb611a9e565b6006015461250991906137c7565b61251391906137a5565b9050600082612520611a9e565b6002018960405161253191906136b8565b90815260408051602092819003830190206001600160a01b038b1660009081529252902060010154612561611a9e565b6006015461256f91906137c7565b61257991906137a5565b91989197509095505050505050565b6000826125f657612597611a9e565b600201866040516125a891906136b8565b90815260408051602092819003830190206001600160a01b03881660009081529252902060010154846125d9611a9e565b600601546125e791906137c7565b6125f191906137a5565b612655565b6125fe611a9e565b6002018660405161260f91906136b8565b90815260408051602092819003830190206001600160a01b038816600090815292529020548461263d611a9e565b6006015461264b91906137c7565b61265591906137a5565b9050600080846126c357612667611a9e565b60060154612673611a9e565b6002018960405161268491906136b8565b90815260408051602092819003830190206001600160a01b038b16600090815292529020546126b390856137c7565b6126bd91906137a5565b86612725565b856126cc611a9e565b600601546126d8611a9e565b6002018a6040516126e991906136b8565b90815260408051602092819003830190206001600160a01b038c166000908152925290206001015461271b90866137c7565b61272591906137a5565b915091506000806127398a8a8a6001612a05565b9150915060008061274a8c8c612f7b565b9150915081612757611a9e565b6001018d60405161276891906136b8565b9081526020016040518091039020600801600082825461278891906137f1565b90915550819050612797611a9e565b6001018d6040516127a891906136b8565b908152602001604051809103902060090160008282546127c891906137f1565b909155508690506127d7611a9e565b6002018d6040516127e891906136b8565b90815260408051602092819003830190206001600160a01b038f16600090815292528120805490919061281c9084906137f1565b9091555085905061282b611a9e565b6002018d60405161283c91906136b8565b908152602001604051809103902060008d6001600160a01b03166001600160a01b03168152602001908152602001600020600101600082825461287f91906137f1565b909155506128b89050612890611a9e565b6001018d6040516128a191906136b8565b908152602001604051809103902060040154613035565b6128c184613035565b6128f46128cc611a9e565b6001018d6040516128dd91906136b8565b908152602001604051809103902060050154613035565b6128fd83613035565b83612906611a9e565b6001018d60405161291791906136b8565b9081526020016040518091039020600401600082825461293791906137f1565b90915550839050612946611a9e565b6001018d60405161295791906136b8565b9081526020016040518091039020600501600082825461297791906137f1565b9091555061298c90508c898d8787878761307d565b505050505050505050505050565b6000806129a5611a9e565b905080600101836040516129b991906136b8565b9081526020016040518091039020600601546000141580156104cd575080600101836040516129e891906136b8565b908152602001604051809103902060070154600014159392505050565b6000806000612a12611a9e565b60010187604051612a2391906136b8565b908152602001604051809103902060060154612a3d611a9e565b60010188604051612a4e91906136b8565b908152602001604051809103902060070154612a68611a9e565b60060154612a7691906137c7565b612a8091906137a5565b90506000612a8c611a9e565b60010188604051612a9d91906136b8565b908152602001604051809103902060070154612ab7611a9e565b60010189604051612ac891906136b8565b908152602001604051809103902060060154612ae2611a9e565b60060154612af091906137c7565b612afa91906137a5565b905060008086612b2a57612b0c611a9e565b60060154612b1a848a6137c7565b612b2491906137a5565b88612b4b565b87612b33611a9e565b60060154612b41868b6137c7565b612b4b91906137a5565b909250905081612b59611a9e565b6001018b604051612b6a91906136b8565b9081526020016040518091039020600401541015612d5e576000612bbd83612b90611a9e565b6001018d604051612ba191906136b8565b9081526020016040518091039020600401546111709190613874565b9050612bc7611a9e565b6001018b604051612bd891906136b8565b9081526020016040518091039020600401549250600088612c5a57612bfb611a9e565b6002018c604051612c0c91906136b8565b90815260408051602092819003830190206001600160a01b038e16600090815292529020600101548a612c3d611a9e565b60060154612c4b91906137c7565b612c5591906137a5565b612cb9565b612c62611a9e565b6002018c604051612c7391906136b8565b90815260408051602092819003830190206001600160a01b038e16600090815292529020548a612ca1611a9e565b60060154612caf91906137c7565b612cb991906137a5565b90506000612cc5611a9e565b60060154612cd1611a9e565b6002018e604051612ce291906136b8565b908152602001604051809103902060008e6001600160a01b03166001600160a01b031681526020019081526020016000206001015483612d2291906137c7565b612d2c91906137a5565b9050612d36611a9e565b60060154612d4488856137c7565b612d4e91906137a5565b612d5890826137de565b93505050505b80612d67611a9e565b6001018b604051612d7891906136b8565b9081526020016040518091039020600501541015612f6c576000612dcb82612d9e611a9e565b6001018d604051612daf91906136b8565b9081526020016040518091039020600501546111709190613874565b9050612dd5611a9e565b6001018b604051612de691906136b8565b9081526020016040518091039020600501549150600088612e6857612e09611a9e565b6002018c604051612e1a91906136b8565b90815260408051602092819003830190206001600160a01b038e16600090815292529020600101548a612e4b611a9e565b60060154612e5991906137c7565b612e6391906137a5565b612ec7565b612e70611a9e565b6002018c604051612e8191906136b8565b90815260408051602092819003830190206001600160a01b038e16600090815292529020548a612eaf611a9e565b60060154612ebd91906137c7565b612ec791906137a5565b90506000612ed3611a9e565b60060154612edf611a9e565b6002018e604051612ef091906136b8565b908152602001604051809103902060008e6001600160a01b03166001600160a01b031681526020019081526020016000206000015483612f3091906137c7565b612f3a91906137a5565b9050612f44611a9e565b60060154612f5287856137c7565b612f5c91906137a5565b612f6690826137de565b94505050505b90999098509650505050505050565b600080600080612f8b868661249e565b9092509050612f98611a9e565b6006015482612fa5611a9e565b60010188604051612fb691906136b8565b908152602001604051809103902060080154612fd291906137c7565b612fdc91906137a5565b612fe4611a9e565b6006015482612ff1611a9e565b6001018960405161300291906136b8565b90815260200160405180910390206009015461301e91906137c7565b61302891906137a5565b9350935050509250929050565b61307a8160405160240161304b91815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b17905261326d565b50565b85156131215760003361309084876137de565b604051600081818185875af1925050503d80600081146130cc576040519150601f19603f3d011682016040523d82523d6000602084013e6130d1565b606091505b505090508061311b5760405162461bcd60e51b815260206004820152601660248201527522b93937b9103932b33ab73234b7339032ba3432b91760511b6044820152606401610520565b506131c8565b613129611a9e565b6001018760405161313a91906136b8565b908152604051908190036020019020600201546001600160a01b031663a9059cbb8661316685886137de565b6040518363ffffffff1660e01b8152600401613183929190613845565b6020604051808303816000875af11580156131a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c69190613828565b505b6131d0611a9e565b600101876040516131e191906136b8565b908152604051908190036020019020600301546001600160a01b031663a9059cbb8661320d84876137de565b6040518363ffffffff1660e01b815260040161322a929190613845565b6020604051808303816000875af1158015613249573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fd9190613828565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60405180604001604052806002906020820280368337509192915050565b60005b838110156132c75781810151838201526020016132af565b50506000910152565b600081518084526132e88160208601602086016132ac565b601f01601f19169290920160200192915050565b6020815260006104cd60208301846132d0565b80356001600160a01b038116811461332657600080fd5b919050565b6000806040838503121561333e57600080fd5b6133478361330f565b946020939093013593505050565b60008060006060848603121561336a57600080fd5b6133738461330f565b92506133816020850161330f565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126133b857600080fd5b81356001600160401b03808211156133d2576133d2613391565b604051601f8301601f19908116603f011681019082821181831017156133fa576133fa613391565b8160405283815286602085880101111561341357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561344857600080fd5b83356001600160401b0381111561345e57600080fd5b61346a868287016133a7565b9350506133816020850161330f565b801515811461307a57600080fd5b60008060006060848603121561349c57600080fd5b83356001600160401b038111156134b257600080fd5b6134be868287016133a7565b9350506020840135915060408401356134d681613479565b809150509250925092565b60408101818360005b60028110156135095781518352602092830192909101906001016134ea565b50505092915050565b60006020828403121561352457600080fd5b81356001600160401b0381111561353a57600080fd5b610a06848285016133a7565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561359b57603f198886030184526135898583516132d0565b9450928501929085019060010161356d565b5092979650505050505050565b6000602082840312156135ba57600080fd5b6104cd8261330f565b600080604083850312156135d657600080fd5b82356001600160401b038111156135ec57600080fd5b6135f8858286016133a7565b95602094909401359450505050565b6000806040838503121561361a57600080fd5b82356001600160401b0381111561363057600080fd5b61363c858286016133a7565b92505061364b6020840161330f565b90509250929050565b6000806040838503121561366757600080fd5b6136708361330f565b915061364b6020840161330f565b600181811c9082168061369257607f821691505b6020821081036136b257634e487b7160e01b600052602260045260246000fd5b50919050565b600082516136ca8184602087016132ac565b9190910192915050565b6020808252603b908201527f5468657265206973206e6f207375636820746f6b656e20636f6e74726163742060408201527a2ca2aa103232b83637bcb2b21034b71037bab91039bcb9ba32b69760291b606082015260800190565b6001600160a01b0391909116815260200190565b60006020828403121561375557600080fd5b5051919050565b60208082526019908201527824b739bab33334b1b4b2b73a1022a921991810333ab732399760391b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000826137c257634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176104a8576104a861378f565b808201808211156104a8576104a861378f565b818103818111156104a8576104a861378f565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561383a57600080fd5b81516104cd81613479565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052603260045260246000fd5b81810360008312801583831316838312821617156138945761389461378f565b5092915050565b60006001600160801b038281166002600160801b031981016138bf576138bf61378f565b6001019392505050565b6000600160ff1b82016138de576138de61378f565b506000039056fea2646970667358221220afb176e1c212a9470851c07d60f2802bdcb7867cfd30d3b858d25362045f92fb64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101095760003560e01c806306fdde0314610115578063095ea7b31461014057806318160ddd1461017057806323b872dd1461018f578063313ce567146101af57806335ec7514146101cb57806339509351146101ed5780633b8ee9701461020d57806343c692391461023a57806357e161f51461025a5780635f480f721461028f578063673a2a1f146102a257806370a08231146102c457806395d89b41146102fa5780639cd0546a1461030f578063a457c2d71461032f578063a9059cbb1461034f578063ad7b47531461036f578063b4f1f0e61461038f578063c6be6e4d146103a2578063dd62ed3e146103c2578063f2bf7787146103e257600080fd5b3661011057005b600080fd5b34801561012157600080fd5b5061012a610402565b60405161013791906132fc565b60405180910390f35b34801561014c57600080fd5b5061016061015b36600461332b565b610494565b6040519015158152602001610137565b34801561017c57600080fd5b506002545b604051908152602001610137565b34801561019b57600080fd5b506101606101aa366004613355565b6104ae565b3480156101bb57600080fd5b5060405160128152602001610137565b3480156101d757600080fd5b506101eb6101e6366004613433565b6104d4565b005b3480156101f957600080fd5b5061016061020836600461332b565b6109d1565b34801561021957600080fd5b5061022d610228366004613487565b6109f3565b60405161013791906134e1565b34801561024657600080fd5b50610181610255366004613487565b610a0e565b34801561026657600080fd5b5061027a610275366004613512565b610a70565b60408051928352602083019190915201610137565b6101eb61029d366004613512565b610a85565b3480156102ae57600080fd5b506102b7610e26565b6040516101379190613546565b3480156102d057600080fd5b506101816102df3660046135a8565b6001600160a01b031660009081526020819052604090205490565b34801561030657600080fd5b5061012a610f08565b34801561031b57600080fd5b5061027a61032a366004613512565b610f17565b34801561033b57600080fd5b5061016061034a36600461332b565b610f91565b34801561035b57600080fd5b5061016061036a36600461332b565b611017565b34801561037b57600080fd5b5061027a61038a366004613487565b611025565b6101eb61039d3660046135c3565b61103f565b3480156103ae57600080fd5b5061027a6103bd366004613607565b611507565b3480156103ce57600080fd5b506101816103dd366004613654565b61151f565b3480156103ee57600080fd5b506101eb6103fd366004613487565b61154a565b6060600380546104119061367e565b80601f016020809104026020016040519081016040528092919081815260200182805461043d9061367e565b801561048a5780601f1061045f5761010080835404028352916020019161048a565b820191906000526020600020905b81548152906001019060200180831161046d57829003601f168201915b5050505050905090565b6000336104a2818585611732565b60019150505b92915050565b6000336104bc858285611856565b6104c78585856118d0565b60019150505b9392505050565b826104dd611a9e565b600101816040516104ee91906136b8565b908152604051908190036020019020600a015460ff166105295760405162461bcd60e51b8152600401610520906136d4565b60405180910390fd5b836001836000610537611a9e565b6001018460405161054891906136b8565b908152604051908190036020018120600201546370a0823160e01b82526001600160a01b03169150829082906370a082319061058890339060040161372f565b602060405180830381865afa1580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190613743565b10156105e75760405162461bcd60e51b81526004016105209061375c565b60006105f1611a9e565b6001018960405161060291906136b8565b90815260200160405180910390206040518061016001604052908160008201805461062c9061367e565b80601f01602080910402602001604051908101604052809291908181526020018280546106589061367e565b80156106a55780601f1061067a576101008083540402835291602001916106a5565b820191906000526020600020905b81548152906001019060200180831161068857829003601f168201915b505050505081526020016001820180546106be9061367e565b80601f01602080910402602001604051908101604052809291908181526020018280546106ea9061367e565b80156107375780601f1061070c57610100808354040283529160200191610737565b820191906000526020600020905b81548152906001019060200180831161071a57829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e08201526009820154610100820152600a9091015460ff16151561012090910152905060006107ba611a9e565b600501546107c890896137a5565b905060008260a0015183608001516107e091906137c7565b90506000898460a001516107f491906137de565b9050600061080284836137f1565b61080c90846137a5565b9050600081866080015161082091906137f1565b90508461082b611a9e565b6001018f60405161083c91906136b8565b9081526020016040518091039020600901600082825461085c91906137de565b9091555082905061086b611a9e565b6001018f60405161087c91906136b8565b9081526040519081900360200190206004015582610898611a9e565b6001018f6040516108a991906136b8565b9081526020016040518091039020600501819055508c6001600160a01b03166323b872dd33308f6040518463ffffffff1660e01b81526004016108ee93929190613804565b6020604051808303816000875af115801561090d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109319190613828565b50604051600090339083908381818185875af1925050503d8060008114610974576040519150601f19603f3d011682016040523d82523d6000602084013e610979565b606091505b50509050806109c05760405162461bcd60e51b815260206004820152601360248201527221b7bab632103737ba1039b2b7321032ba341760691b6044820152606401610520565b505050505050505050505050505050565b6000336104a28185856109e4838361151f565b6109ee91906137de565b611732565b6109fb61328e565b610a06848484611ac1565b949350505050565b600083610a19611a9e565b60010181604051610a2a91906136b8565b908152604051908190036020019020600a015460ff16610a5c5760405162461bcd60e51b8152600401610520906136d4565b610a6785858561206a565b95945050505050565b600080610a7c836122e3565b91509150915091565b80610a8e611a9e565b60010181604051610a9f91906136b8565b908152604051908190036020019020600a015460ff16610ad15760405162461bcd60e51b8152600401610520906136d4565b6000610adb611a9e565b60010183604051610aec91906136b8565b908152602001604051809103902060405180610160016040529081600082018054610b169061367e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b429061367e565b8015610b8f5780601f10610b6457610100808354040283529160200191610b8f565b820191906000526020600020905b815481529060010190602001808311610b7257829003601f168201915b50505050508152602001600182018054610ba89061367e565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd49061367e565b8015610c215780601f10610bf657610100808354040283529160200191610c21565b820191906000526020600020905b815481529060010190602001808311610c0457829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e08201526009820154610100820152600a9091015460ff1615156101209091015290506000610ca4611a9e565b60050154610cb290346137a5565b905060008260a001518360800151610cca91906137c7565b90506000348460800151610cde91906137de565b90506000610cec84836137f1565b610cf690846137a5565b90506000818660a00151610d0a91906137f1565b905084610d15611a9e565b60010189604051610d2691906136b8565b90815260200160405180910390206008016000828254610d4691906137de565b90915550839050610d55611a9e565b60010189604051610d6691906136b8565b9081526040519081900360200190206004015581610d82611a9e565b60010189604051610d9391906136b8565b90815260405190819003602001812060050191909155606087015163a9059cbb60e01b82526001600160a01b03169063a9059cbb90610dd89033908590600401613845565b6020604051808303816000875af1158015610df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1b9190613828565b505050505050505050565b6060610e30611a9e565b600401805480602002602001604051908101604052809291908181526020016000905b82821015610eff578382906000526020600020018054610e729061367e565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9e9061367e565b8015610eeb5780601f10610ec057610100808354040283529160200191610eeb565b820191906000526020600020905b815481529060010190602001808311610ece57829003601f168201915b505050505081526020019060010190610e53565b50505050905090565b6060600480546104119061367e565b600080610f22611a9e565b60020183604051610f3391906136b8565b90815260408051602092819003830190203360009081529252902054610f57611a9e565b60020184604051610f6891906136b8565b908152604080516020928190038301902033600090815292529020600101549094909350915050565b60003381610f9f828661151f565b905083811015610fff5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610520565b61100c8286868403611732565b506001949350505050565b6000336104a28185856118d0565b600080611033858585612435565b91509150935093915050565b81611048611a9e565b6001018160405161105991906136b8565b908152604051908190036020019020600a015460ff1661108b5760405162461bcd60e51b8152600401610520906136d4565b826002836000611099611a9e565b600101846040516110aa91906136b8565b908152604051908190036020018120600301546370a0823160e01b82526001600160a01b03169150829082906370a08231906110ea90339060040161372f565b602060405180830381865afa158015611107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112b9190613743565b10156111495760405162461bcd60e51b81526004016105209061375c565b6000611157883460016109f3565b6020015190506402540be4006111756111708984613874565b612482565b106111f25760405162461bcd60e51b815260206004820152604160248201527f416d6f756e7420696e736572746564206973206e6f742068656c70696e67207460448201527f686520706f6f6c2067657420746f20657175696c69627269756d2073746174656064820152601760f91b608482015260a401610520565b6111fa611a9e565b6001018860405161120b91906136b8565b908152604051908190036020018120600301546323b872dd60e01b82526001600160a01b0316906323b872dd9061124a90339030908c90600401613804565b6020604051808303816000875af1158015611269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128d9190613828565b5034611297611a9e565b600101896040516112a891906136b8565b908152602001604051809103902060040160008282546112c891906137de565b909155508790506112d7611a9e565b600101896040516112e891906136b8565b9081526020016040518091039020600501600082825461130891906137de565b909155506113169050611a9e565b6002018860405161132791906136b8565b908152604080516020928190038301902033600090815292529020541580156113855750611353611a9e565b6002018860405161136491906136b8565b90815260408051602092819003830190203360009081529252902060010154155b156113d757611392611a9e565b600301886040516113a391906136b8565b908152604051908190036020908101909120805460018101825560009182529190200180546001600160a01b031916331790555b346113e0611a9e565b600201896040516113f191906136b8565b908152604080516020928190038301902033600090815292528120805490919061141c9084906137de565b9091555087905061142b611a9e565b6002018960405161143c91906136b8565b908152604080516020928190038301902033600090815292528120600101805490919061146a9084906137de565b909155506114789050611a9e565b6001018860405161148991906136b8565b9081526020016040518091039020600601546000036114fd57346114ab611a9e565b600101896040516114bc91906136b8565b90815260405190819003602001902060060155866114d8611a9e565b600101896040516114e991906136b8565b908152604051908190036020019020600701555b5050505050505050565b600080611514848461249e565b915091509250929050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b826000611555611a9e565b6002018260405161156691906136b8565b908152604080516020928190038301902033600090815292529020541180156115c657506000611594611a9e565b600201826040516115a591906136b8565b90815260408051602092819003830190203360009081529252902060010154115b6116385760405162461bcd60e51b815260206004820152603f60248201527f4f6e6c79207368617265686f6c64657273206f6620746865206c69717569646960448201527f747920706f6f6c2063616e2063616c6c20746869732066756e6374696f6e2e006064820152608401610520565b838383806116805781611649611a9e565b6002018460405161165a91906136b8565b9081526040805160209281900383019020336000908152925290206001015410156116b9565b81611689611a9e565b6002018460405161169a91906136b8565b9081526040805160209281900383019020336000908152925290205410155b61171b5760405162461bcd60e51b815260206004820152602d60248201527f43616e6e6f74207769746864726177206d6f7265207468616e2068617320626560448201526c32b7103232b837b9b4ba32b21760991b6064820152608401610520565b611729873388886001612588565b50505050505050565b6001600160a01b0383166117945760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610520565b6001600160a01b0382166117f55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610520565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000611862848461151f565b905060001981146118ca57818110156118bd5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610520565b6118ca8484848403611732565b50505050565b6001600160a01b0383166119345760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610520565b6001600160a01b0382166119965760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610520565b6001600160a01b03831660009081526020819052604090205481811015611a0e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610520565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611a459084906137de565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611a9191815260200190565b60405180910390a36118ca565b7e5661492dcd9d3c02dbd3b7e7855c55a879f698c500b1c9587676404c7e9c7490565b611ac961328e565b6000611ad3611a9e565b60010185604051611ae491906136b8565b908152602001604051809103902060405180610160016040529081600082018054611b0e9061367e565b80601f0160208091040260200160405190810160405280929190818152602001828054611b3a9061367e565b8015611b875780601f10611b5c57610100808354040283529160200191611b87565b820191906000526020600020905b815481529060010190602001808311611b6a57829003601f168201915b50505050508152602001600182018054611ba09061367e565b80601f0160208091040260200160405190810160405280929190818152602001828054611bcc9061367e565b8015611c195780601f10611bee57610100808354040283529160200191611c19565b820191906000526020600020905b815481529060010190602001808311611bfc57829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e08201526009820154610100820152600a9091015460ff161515610120909101529050611c9b8561299a565b611f425782611df1576040518060400160405280611cb7611a9e565b6006015486611cc4611a9e565b5460408087015190516341976e0960e01b81526001600160a01b03909216916341976e0991611cf59160040161372f565b602060405180830381865afa158015611d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d369190613743565b611d3e611a9e565b5460608701516040516341976e0960e01b81526001600160a01b03909216916341976e0991611d6f9160040161372f565b602060405180830381865afa158015611d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db09190613743565b611db8611a9e565b60060154611dc691906137c7565b611dd091906137a5565b611dda91906137c7565b611de491906137a5565b8152602001859052611f3a565b6040518060400160405280858152602001611e0a611a9e565b6006015486611e17611a9e565b5460608601516040516341976e0960e01b81526001600160a01b03909216916341976e0991611e489160040161372f565b602060405180830381865afa158015611e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e899190613743565b611e91611a9e565b5460408088015190516341976e0960e01b81526001600160a01b03909216916341976e0991611ec29160040161372f565b602060405180830381865afa158015611edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f039190613743565b611f0b611a9e565b60060154611f1991906137c7565b611f2391906137a5565b611f2d91906137c7565b611f3791906137a5565b90525b9150506104cd565b8215611fd95760008160c001518260e00151611f5c611a9e565b60060154611f6a91906137c7565b611f7491906137a5565b905060008260a00151611f85611a9e565b6006015483888660800151611f9a91906137de565b611fa491906137c7565b611fae91906137a5565b611fb891906137f1565b905060405180604001604052808781526020018281525093505050506104cd565b60008160e001518260c00151611fed611a9e565b60060154611ffb91906137c7565b61200591906137a5565b905060008260800151612016611a9e565b6006015483888660a0015161202b91906137de565b61203591906137c7565b61203f91906137a5565b61204991906137f1565b905060405180604001604052808281526020018781525093505050506104cd565b600080612075611a9e565b6001018560405161208691906136b8565b9081526020016040518091039020604051806101600160405290816000820180546120b09061367e565b80601f01602080910402602001604051908101604052809291908181526020018280546120dc9061367e565b80156121295780601f106120fe57610100808354040283529160200191612129565b820191906000526020600020905b81548152906001019060200180831161210c57829003601f168201915b505050505081526020016001820180546121429061367e565b80601f016020809104026020016040519081016040528092919081815260200182805461216e9061367e565b80156121bb5780601f10612190576101008083540402835291602001916121bb565b820191906000526020600020905b81548152906001019060200180831161219e57829003601f168201915b505050918352505060028201546001600160a01b03908116602083015260038301541660408201526004820154606082015260058201546080820152600682015460a0820152600782015460c0820152600882015460e08201526009820154610100820152600a9091015460ff161515610120909101529050600061223e611a9e565b6005015461224c90866137a5565b905060008260a00151836080015161226491906137c7565b9050846122a45781868460a0015161227c91906137de565b61228691906137f1565b61229090826137a5565b836080015161229f91906137f1565b6122d8565b818684608001516122b591906137de565b6122bf91906137f1565b6122c990826137a5565b8360a001516122d891906137f1565b979650505050505050565b60008060008060005b6122f4611a9e565b6003018660405161230591906136b8565b908152604051908190036020019020546001600160801b038216101561242a57600061232f611a9e565b6003018760405161234091906136b8565b9081526020016040518091039020826001600160801b0316815481106123685761236861385e565b6000918252602090912001546001600160a01b03169050612387611a9e565b6002018760405161239891906136b8565b90815260408051602092819003830190206001600160a01b038416600090815292529020546123c790856137de565b93506123d1611a9e565b600201876040516123e291906136b8565b90815260408051602092819003830190206001600160a01b0384166000908152925290206001015461241490846137de565b92505080806124229061389b565b9150506122ec565b509094909350915050565b60008060008061244787338888612a05565b90925090506000806124598933612f7b565b909250905061246882856137de565b61247282856137de565b9550955050505050935093915050565b60008082121561249a57612495826138c9565b6104a8565b5090565b6000806000806124ad866122e3565b90925090506000826124bd611a9e565b600201886040516124ce91906136b8565b90815260408051602092819003830190206001600160a01b038a16600090815292529020546124fb611a9e565b6006015461250991906137c7565b61251391906137a5565b9050600082612520611a9e565b6002018960405161253191906136b8565b90815260408051602092819003830190206001600160a01b038b1660009081529252902060010154612561611a9e565b6006015461256f91906137c7565b61257991906137a5565b91989197509095505050505050565b6000826125f657612597611a9e565b600201866040516125a891906136b8565b90815260408051602092819003830190206001600160a01b03881660009081529252902060010154846125d9611a9e565b600601546125e791906137c7565b6125f191906137a5565b612655565b6125fe611a9e565b6002018660405161260f91906136b8565b90815260408051602092819003830190206001600160a01b038816600090815292529020548461263d611a9e565b6006015461264b91906137c7565b61265591906137a5565b9050600080846126c357612667611a9e565b60060154612673611a9e565b6002018960405161268491906136b8565b90815260408051602092819003830190206001600160a01b038b16600090815292529020546126b390856137c7565b6126bd91906137a5565b86612725565b856126cc611a9e565b600601546126d8611a9e565b6002018a6040516126e991906136b8565b90815260408051602092819003830190206001600160a01b038c166000908152925290206001015461271b90866137c7565b61272591906137a5565b915091506000806127398a8a8a6001612a05565b9150915060008061274a8c8c612f7b565b9150915081612757611a9e565b6001018d60405161276891906136b8565b9081526020016040518091039020600801600082825461278891906137f1565b90915550819050612797611a9e565b6001018d6040516127a891906136b8565b908152602001604051809103902060090160008282546127c891906137f1565b909155508690506127d7611a9e565b6002018d6040516127e891906136b8565b90815260408051602092819003830190206001600160a01b038f16600090815292528120805490919061281c9084906137f1565b9091555085905061282b611a9e565b6002018d60405161283c91906136b8565b908152602001604051809103902060008d6001600160a01b03166001600160a01b03168152602001908152602001600020600101600082825461287f91906137f1565b909155506128b89050612890611a9e565b6001018d6040516128a191906136b8565b908152602001604051809103902060040154613035565b6128c184613035565b6128f46128cc611a9e565b6001018d6040516128dd91906136b8565b908152602001604051809103902060050154613035565b6128fd83613035565b83612906611a9e565b6001018d60405161291791906136b8565b9081526020016040518091039020600401600082825461293791906137f1565b90915550839050612946611a9e565b6001018d60405161295791906136b8565b9081526020016040518091039020600501600082825461297791906137f1565b9091555061298c90508c898d8787878761307d565b505050505050505050505050565b6000806129a5611a9e565b905080600101836040516129b991906136b8565b9081526020016040518091039020600601546000141580156104cd575080600101836040516129e891906136b8565b908152602001604051809103902060070154600014159392505050565b6000806000612a12611a9e565b60010187604051612a2391906136b8565b908152602001604051809103902060060154612a3d611a9e565b60010188604051612a4e91906136b8565b908152602001604051809103902060070154612a68611a9e565b60060154612a7691906137c7565b612a8091906137a5565b90506000612a8c611a9e565b60010188604051612a9d91906136b8565b908152602001604051809103902060070154612ab7611a9e565b60010189604051612ac891906136b8565b908152602001604051809103902060060154612ae2611a9e565b60060154612af091906137c7565b612afa91906137a5565b905060008086612b2a57612b0c611a9e565b60060154612b1a848a6137c7565b612b2491906137a5565b88612b4b565b87612b33611a9e565b60060154612b41868b6137c7565b612b4b91906137a5565b909250905081612b59611a9e565b6001018b604051612b6a91906136b8565b9081526020016040518091039020600401541015612d5e576000612bbd83612b90611a9e565b6001018d604051612ba191906136b8565b9081526020016040518091039020600401546111709190613874565b9050612bc7611a9e565b6001018b604051612bd891906136b8565b9081526020016040518091039020600401549250600088612c5a57612bfb611a9e565b6002018c604051612c0c91906136b8565b90815260408051602092819003830190206001600160a01b038e16600090815292529020600101548a612c3d611a9e565b60060154612c4b91906137c7565b612c5591906137a5565b612cb9565b612c62611a9e565b6002018c604051612c7391906136b8565b90815260408051602092819003830190206001600160a01b038e16600090815292529020548a612ca1611a9e565b60060154612caf91906137c7565b612cb991906137a5565b90506000612cc5611a9e565b60060154612cd1611a9e565b6002018e604051612ce291906136b8565b908152602001604051809103902060008e6001600160a01b03166001600160a01b031681526020019081526020016000206001015483612d2291906137c7565b612d2c91906137a5565b9050612d36611a9e565b60060154612d4488856137c7565b612d4e91906137a5565b612d5890826137de565b93505050505b80612d67611a9e565b6001018b604051612d7891906136b8565b9081526020016040518091039020600501541015612f6c576000612dcb82612d9e611a9e565b6001018d604051612daf91906136b8565b9081526020016040518091039020600501546111709190613874565b9050612dd5611a9e565b6001018b604051612de691906136b8565b9081526020016040518091039020600501549150600088612e6857612e09611a9e565b6002018c604051612e1a91906136b8565b90815260408051602092819003830190206001600160a01b038e16600090815292529020600101548a612e4b611a9e565b60060154612e5991906137c7565b612e6391906137a5565b612ec7565b612e70611a9e565b6002018c604051612e8191906136b8565b90815260408051602092819003830190206001600160a01b038e16600090815292529020548a612eaf611a9e565b60060154612ebd91906137c7565b612ec791906137a5565b90506000612ed3611a9e565b60060154612edf611a9e565b6002018e604051612ef091906136b8565b908152602001604051809103902060008e6001600160a01b03166001600160a01b031681526020019081526020016000206000015483612f3091906137c7565b612f3a91906137a5565b9050612f44611a9e565b60060154612f5287856137c7565b612f5c91906137a5565b612f6690826137de565b94505050505b90999098509650505050505050565b600080600080612f8b868661249e565b9092509050612f98611a9e565b6006015482612fa5611a9e565b60010188604051612fb691906136b8565b908152602001604051809103902060080154612fd291906137c7565b612fdc91906137a5565b612fe4611a9e565b6006015482612ff1611a9e565b6001018960405161300291906136b8565b90815260200160405180910390206009015461301e91906137c7565b61302891906137a5565b9350935050509250929050565b61307a8160405160240161304b91815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b17905261326d565b50565b85156131215760003361309084876137de565b604051600081818185875af1925050503d80600081146130cc576040519150601f19603f3d011682016040523d82523d6000602084013e6130d1565b606091505b505090508061311b5760405162461bcd60e51b815260206004820152601660248201527522b93937b9103932b33ab73234b7339032ba3432b91760511b6044820152606401610520565b506131c8565b613129611a9e565b6001018760405161313a91906136b8565b908152604051908190036020019020600201546001600160a01b031663a9059cbb8661316685886137de565b6040518363ffffffff1660e01b8152600401613183929190613845565b6020604051808303816000875af11580156131a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c69190613828565b505b6131d0611a9e565b600101876040516131e191906136b8565b908152604051908190036020019020600301546001600160a01b031663a9059cbb8661320d84876137de565b6040518363ffffffff1660e01b815260040161322a929190613845565b6020604051808303816000875af1158015613249573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fd9190613828565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60405180604001604052806002906020820280368337509192915050565b60005b838110156132c75781810151838201526020016132af565b50506000910152565b600081518084526132e88160208601602086016132ac565b601f01601f19169290920160200192915050565b6020815260006104cd60208301846132d0565b80356001600160a01b038116811461332657600080fd5b919050565b6000806040838503121561333e57600080fd5b6133478361330f565b946020939093013593505050565b60008060006060848603121561336a57600080fd5b6133738461330f565b92506133816020850161330f565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126133b857600080fd5b81356001600160401b03808211156133d2576133d2613391565b604051601f8301601f19908116603f011681019082821181831017156133fa576133fa613391565b8160405283815286602085880101111561341357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561344857600080fd5b83356001600160401b0381111561345e57600080fd5b61346a868287016133a7565b9350506133816020850161330f565b801515811461307a57600080fd5b60008060006060848603121561349c57600080fd5b83356001600160401b038111156134b257600080fd5b6134be868287016133a7565b9350506020840135915060408401356134d681613479565b809150509250925092565b60408101818360005b60028110156135095781518352602092830192909101906001016134ea565b50505092915050565b60006020828403121561352457600080fd5b81356001600160401b0381111561353a57600080fd5b610a06848285016133a7565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561359b57603f198886030184526135898583516132d0565b9450928501929085019060010161356d565b5092979650505050505050565b6000602082840312156135ba57600080fd5b6104cd8261330f565b600080604083850312156135d657600080fd5b82356001600160401b038111156135ec57600080fd5b6135f8858286016133a7565b95602094909401359450505050565b6000806040838503121561361a57600080fd5b82356001600160401b0381111561363057600080fd5b61363c858286016133a7565b92505061364b6020840161330f565b90509250929050565b6000806040838503121561366757600080fd5b6136708361330f565b915061364b6020840161330f565b600181811c9082168061369257607f821691505b6020821081036136b257634e487b7160e01b600052602260045260246000fd5b50919050565b600082516136ca8184602087016132ac565b9190910192915050565b6020808252603b908201527f5468657265206973206e6f207375636820746f6b656e20636f6e74726163742060408201527a2ca2aa103232b83637bcb2b21034b71037bab91039bcb9ba32b69760291b606082015260800190565b6001600160a01b0391909116815260200190565b60006020828403121561375557600080fd5b5051919050565b60208082526019908201527824b739bab33334b1b4b2b73a1022a921991810333ab732399760391b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000826137c257634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176104a8576104a861378f565b808201808211156104a8576104a861378f565b818103818111156104a8576104a861378f565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561383a57600080fd5b81516104cd81613479565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052603260045260246000fd5b81810360008312801583831316838312821617156138945761389461378f565b5092915050565b60006001600160801b038281166002600160801b031981016138bf576138bf61378f565b6001019392505050565b6000600160ff1b82016138de576138de61378f565b506000039056fea2646970667358221220afb176e1c212a9470851c07d60f2802bdcb7867cfd30d3b858d25362045f92fb64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 118,
        "contract": "contracts/EthToERC20.sol:EthToERC20",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 124,
        "contract": "contracts/EthToERC20.sol:EthToERC20",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 126,
        "contract": "contracts/EthToERC20.sol:EthToERC20",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 128,
        "contract": "contracts/EthToERC20.sol:EthToERC20",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 130,
        "contract": "contracts/EthToERC20.sol:EthToERC20",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}