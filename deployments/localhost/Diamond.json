{
  "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamond.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamond.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "init",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "initCalldata",
              "type": "bytes"
            }
          ],
          "internalType": "struct Diamond.DiamondArgs",
          "name": "_args",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x21ed6438072bdc3e656b0edb0ce72746b9fa193aae84ba44b088a9545c49a8ad",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "transactionIndex": 0,
    "gasUsed": "2847544",
    "logsBloom": "0x
    "blockHash": "0xa4ef9212cab8277aa64749d30978633e535f975761aa162dd55d80e8ec049edc",
    "transactionHash": "0x21ed6438072bdc3e656b0edb0ce72746b9fa193aae84ba44b088a9545c49a8ad",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10,
        "transactionHash": "0x21ed6438072bdc3e656b0edb0ce72746b9fa193aae84ba44b088a9545c49a8ad",
        "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa4ef9212cab8277aa64749d30978633e535f975761aa162dd55d80e8ec049edc"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10,
        "transactionHash": "0x21ed6438072bdc3e656b0edb0ce72746b9fa193aae84ba44b088a9545c49a8ad",
        "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000600000000000000000000000002279b7a0a67db372996a5fab50d91eaa73d2ebe600000000000000000000000000000000000000000000000000000000000005400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000165878a594ca255338adfa4d48449f69242eb8f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000016dd62ed3e00000000000000000000000000000000000000000000000000000000095ea7b30000000000000000000000000000000000000000000000000000000070a0823100000000000000000000000000000000000000000000000000000000313ce56700000000000000000000000000000000000000000000000000000000a457c2d700000000000000000000000000000000000000000000000000000000b4f1f0e600000000000000000000000000000000000000000000000000000000527f5a59000000000000000000000000000000000000000000000000000000003b8ee97000000000000000000000000000000000000000000000000000000000ad7b4753000000000000000000000000000000000000000000000000000000005f480f7200000000000000000000000000000000000000000000000000000000f2bf778700000000000000000000000000000000000000000000000000000000c6be6e4d0000000000000000000000000000000000000000000000000000000057e161f500000000000000000000000000000000000000000000000000000000673a2a1f0000000000000000000000000000000000000000000000000000000043c69239000000000000000000000000000000000000000000000000000000009cd0546a00000000000000000000000000000000000000000000000000000000395093510000000000000000000000000000000000000000000000000000000006fdde030000000000000000000000000000000000000000000000000000000095d89b410000000000000000000000000000000000000000000000000000000018160ddd00000000000000000000000000000000000000000000000000000000a9059cbb0000000000000000000000000000000000000000000000000000000023b872dd00000000000000000000000000000000000000000000000000000000000000000000000000000000a513e6e4b8f2a923d98304ec87f64353c4d5c8530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000062af1eedc00000000000000000000000000000000000000000000000000000000f0ad345d00000000000000000000000000000000000000000000000000000000e72d02e800000000000000000000000000000000000000000000000000000000bad2b9530000000000000000000000000000000000000000000000000000000030ad9f140000000000000000000000000000000000000000000000000000000047df9bf10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e4d367031200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001800000000000000000000000005fc8d32690cc91d4c39d9d3abcbd16989f87570700000000000000000000000000000000000000000000000000470de4df82000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000006000000000000000000000000dc64a140aa3e981100a9beca4e685f962f0cf6c9000000000000000000000000e7f1725e7734ce288f8367e1bb143e90bb3f0512000000000000000000000000dc64a140aa3e981100a9beca4e685f962f0cf6c90000000000000000000000005fbdb2315678afecb367f032d93f642f64180aa3000000000000000000000000e7f1725e7734ce288f8367e1bb143e90bb3f05120000000000000000000000005fbdb2315678afecb367f032d93f642f64180aa3000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000455544d430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000455434d4300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000455544d4300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000455434d430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0xa4ef9212cab8277aa64749d30978633e535f975761aa162dd55d80e8ec049edc"
      }
    ],
    "blockNumber": 10,
    "cumulativeGasUsed": "2847544",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      [
        "0x0165878A594ca255338adfa4d48449f69242Eb8F",
        0,
        [
          "0xdd62ed3e",
          "0x095ea7b3",
          "0x70a08231",
          "0x313ce567",
          "0xa457c2d7",
          "0xb4f1f0e6",
          "0x527f5a59",
          "0x3b8ee970",
          "0xad7b4753",
          "0x5f480f72",
          "0xf2bf7787",
          "0xc6be6e4d",
          "0x57e161f5",
          "0x673a2a1f",
          "0x43c69239",
          "0x9cd0546a",
          "0x39509351",
          "0x06fdde03",
          "0x95d89b41",
          "0x18160ddd",
          "0xa9059cbb",
          "0x23b872dd"
        ]
      ],
      [
        "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
        0,
        [
          "0x2af1eedc",
          "0xf0ad345d",
          "0xe72d02e8",
          "0xbad2b953",
          "0x30ad9f14",
          "0x47df9bf1"
        ]
      ]
    ],
    [
      "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
      "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
      "0xd367031200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001800000000000000000000000005fc8d32690cc91d4c39d9d3abcbd16989f87570700000000000000000000000000000000000000000000000000470de4df82000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000006000000000000000000000000dc64a140aa3e981100a9beca4e685f962f0cf6c9000000000000000000000000e7f1725e7734ce288f8367e1bb143e90bb3f0512000000000000000000000000dc64a140aa3e981100a9beca4e685f962f0cf6c90000000000000000000000005fbdb2315678afecb367f032d93f642f64180aa3000000000000000000000000e7f1725e7734ce288f8367e1bb143e90bb3f05120000000000000000000000005fbdb2315678afecb367f032d93f642f64180aa3000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000455544d430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000455434d4300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000455544d4300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000455434d4300000000000000000000000000000000000000000000000000000000"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "2aa61701553806f47149314b52f8b089",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamond.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamond.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initCalldata\",\"type\":\"bytes\"}],\"internalType\":\"struct Diamond.DiamondArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Diamond.sol\":\"Diamond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"contracts/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\nimport {LibDiamond} from \\\"./libraries/LibDiamond.sol\\\";\\nimport {IDiamondCut} from \\\"./interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"./interfaces/IDiamondLoupe.sol\\\";\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {IERC173} from \\\"./interfaces/IERC173.sol\\\";\\n\\ncontract Diamond {\\n    struct DiamondArgs {\\n        address owner;\\n        address init;\\n        bytes initCalldata;\\n    }\\n\\n    constructor(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        DiamondArgs memory _args\\n    ) payable {\\n        LibDiamond.setContractOwner(_args.owner);\\n        LibDiamond.diamondCut(_diamondCut, _args.init, _args.initCalldata);\\n    }\\n\\n    fallback() external payable {\\n        LibDiamond.DiamondStorage storage ds;\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n        address facet = ds.facet[msg.sig].facetAddress;\\n        require(facet != address(0), \\\"Function not found.\\\");\\n        assembly {\\n            let ptr := mload(0x40)\\n            calldatacopy(ptr, 0, calldatasize())\\n            let result := delegatecall(gas(), facet, ptr, calldatasize(), 0, 0)\\n            let size := returndatasize()\\n            returndatacopy(ptr, 0, size)\\n            switch result\\n            case 0 {\\n                revert(ptr, size)\\n            }\\n            default {\\n                return(ptr, size)\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x980442e053e0775e5ea1c3ef53adec8f526a888f53a5a0e585da88e061ceffbc\",\"license\":\"No-License\"},\"contracts/interfaces/IDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\ninterface IDiamond {\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n}\\n\",\"keccak256\":\"0x3ee58603b05079ce988cfa43d9656aca8e0c720009cc773427c6e4a4dd6243e8\",\"license\":\"No-License\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\nimport \\\"./IDiamond.sol\\\";\\n\\ninterface IDiamondCut is IDiamond {\\n    function diamond(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd4126eb2eb5bb25f353dbfbcc21d5404ec9299b84d447953ccfe4e3141b499c3\",\"license\":\"No-License\"},\"contracts/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\ninterface IDiamondLoupe {\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    function facetAddresses(address _facet)\\n        external\\n        view\\n        returns (address[] memory facetAddresses_);\\n\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0xeb10559294698c216f22855ae215dc400e08fe8b11c6663b27b3f256e6a051ea\",\"license\":\"No-License\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xafab504b404c5cd7286937be166e32db0029d86e2f397d2e3dfd933c9f349630\",\"license\":\"No-License\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function owner() external view returns (address owner_);\\n\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xeaf86811bf53df1bad102312226ca6324937d808b7e6bf906d3f2d37dd2661f1\",\"license\":\"No-License\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: No-License\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../interfaces/IDiamond.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamonds.standart.diamond.storage\\\");\\n\\n    struct Facet {\\n        address facetAddress;\\n        uint16 selectorPosition;\\n    }\\n\\n    struct DiamondStorage {\\n        address contractOwner;\\n        mapping(bytes4 => Facet) facet;\\n        bytes4[] selectors;\\n        mapping(bytes4 => uint256) selectorToIndex;\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed prevOwner,\\n        address indexed newOwner\\n    );\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _callData\\n    );\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address prevOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(prevOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        if (msg.sender != diamondStorage().contractOwner) revert();\\n    }\\n\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            bytes4[] memory functionSelectors = _diamondCut[facetIndex]\\n                .functionSelectors;\\n            address facetAddress = _diamondCut[facetIndex].facetAddress;\\n            if (functionSelectors.length == 0) revert();\\n\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamond.FacetCutAction.Add)\\n                addFunctions(facetAddress, functionSelectors);\\n            else if (action == IDiamond.FacetCutAction.Replace)\\n                replaceFunctions(facetAddress, functionSelectors);\\n            else if (action == IDiamond.FacetCutAction.Remove)\\n                removeFunctions(facetAddress, functionSelectors);\\n            else revert();\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        if (_facetAddress == address(0)) revert();\\n        enforceHasContractCode(\\n            _facetAddress,\\n            \\\"LibDIamondCut: Add facet has no code.\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        uint16 selectorCount = uint16(_functionSelectors.length);\\n        for (uint256 index = 0; index < _functionSelectors.length; index++) {\\n            bytes4 selector = _functionSelectors[index];\\n            address oldFacetAddress = ds.facet[selector].facetAddress;\\n            if (oldFacetAddress != address(0)) revert(); // prohibit adding already existing function\\n            ds.facet[selector] = Facet(_facetAddress, selectorCount);\\n            ds.selectors.push(selector);\\n            ds.selectorToIndex[selector] = ++selectorCount;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(_facetAddress != address(0), \\\"\\\");\\n        enforceHasContractCode(\\n            _facetAddress,\\n            \\\"LibDiamondCut: Replace facet has no code.\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        for (\\n            uint256 selectorIndex = 0;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.facet[selector].facetAddress;\\n            require(oldFacetAddress != address(this), \\\"Function is immutable.\\\");\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"Can't replace facet with same facet.\\\"\\n            );\\n            require(\\n                oldFacetAddress != address(0),\\n                \\\"Cannot have address 0 facet.\\\"\\n            );\\n            ds.facet[selector].facetAddress = _facetAddress;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(_facetAddress != address(0), \\\"\\\");\\n        enforceHasContractCode(\\n            _facetAddress,\\n            \\\"LibDiamondCut: Replace facet has no code.\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 selectorCount = uint16(_functionSelectors.length);\\n        for (\\n            uint256 selectorIndex = 0;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            Facet memory oldFacet = ds.facet[selector];\\n            require(oldFacet.facetAddress != address(0), \\\"No facet to remove.\\\");\\n            require(\\n                oldFacet.facetAddress == address(this),\\n                \\\"Can't remove an immutable function.\\\"\\n            );\\n            /// @TODO: decypher the next 6 lines of code\\n            if (oldFacet.selectorPosition != --selectorCount) {\\n                bytes4 lastSelector = ds.selectors[selectorCount];\\n                ds.selectors[oldFacet.selectorPosition] = lastSelector;\\n                ds.facet[lastSelector].selectorPosition = oldFacet\\n                    .selectorPosition;\\n            }\\n            ds.selectors.pop();\\n            delete ds.facet[selector];\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        // check if _init exists and has code and delegate the calldata\\n        if (_init == address(0)) return;\\n        enforceHasContractCode(\\n            _init,\\n            \\\"LibDIamondCut: _init address has no code\\\"\\n        );\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else revert();\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize != 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x5882958b8f2e483498ada2250f4b944f2af19417fd8596545e8df22f48a1a343\",\"license\":\"No-License\"}},\"version\":1}",
  "bytecode": "0x608060405260405162001d2738038062001d27833981016040819052620000269162000bd8565b6200004081600001516200006860201b620000cc1760201c565b620000608282602001518360400151620000c660201b620001281760201c565b505062000fb7565b60006200007462000253565b80546001600160a01b038481166001600160a01b031983168117845560405193945091169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60005b835181101562000204576000848281518110620000ea57620000ea62000d96565b602002602001015160400151905060008583815181106200010f576200010f62000d96565b602002602001015160000151905081516000036200012c57600080fd5b600086848151811062000143576200014362000d96565b60200260200101516020015190506000600281111562000167576200016762000dac565b8160028111156200017c576200017c62000dac565b0362000194576200018e828462000277565b620001eb565b6001816002811115620001ab57620001ab62000dac565b03620001bd576200018e828462000414565b6002816002811115620001d457620001d462000dac565b03620001e6576200018e82846200063d565b600080fd5b5050508080620001fb9062000dd8565b915050620000c9565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738383836040516200023a9392919062000e22565b60405180910390a16200024e828262000955565b505050565b7f6b31a88a1d36ceba695c96c7e3e64760eb15db319092c747fb72252ca786e28d90565b6001600160a01b0382166200028b57600080fd5b620002b08260405180606001604052806025815260200162001d026025913962000a08565b6000620002bc62000253565b825190915060005b83518110156200040d576000848281518110620002e557620002e562000d96565b6020908102919091018101516001600160e01b031981166000908152600187019092526040909120549091506001600160a01b031680156200032657600080fd5b6040805180820182526001600160a01b03808a16825261ffff80881660208085019182526001600160e01b0319881660009081526001808d018352968120955186549351909416600160a01b026001600160b01b031990931693909416929092171790925560028801805493840181558152206008820401805460e085901c60046007909416939093026101000a92830263ffffffff9093021916919091179055620003d28462000f29565b6001600160e01b03199092166000908152600386016020526040902061ffff8316905550915080620004048162000dd8565b915050620002c4565b5050505050565b6001600160a01b0382166200044a5760405162461bcd60e51b815260206004820152600060248201526044015b60405180910390fd5b6200046f8260405180606001604052806029815260200162001cb16029913962000a08565b60006200047b62000253565b905060005b825181101562000637576000838281518110620004a157620004a162000d96565b6020908102919091018101516001600160e01b031981166000908152600186019092526040909120549091506001600160a01b0316308103620005275760405162461bcd60e51b815260206004820152601660248201527f46756e6374696f6e20697320696d6d757461626c652e00000000000000000000604482015260640162000441565b856001600160a01b0316816001600160a01b031603620005965760405162461bcd60e51b8152602060048201526024808201527f43616e2774207265706c61636520666163657420776974682073616d6520666160448201526331b2ba1760e11b606482015260840162000441565b6001600160a01b038116620005ee5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742068617665206164647265737320302066616365742e00000000604482015260640162000441565b506001600160e01b0319166000908152600183016020526040902080546001600160a01b0319166001600160a01b038616179055806200062e8162000dd8565b91505062000480565b50505050565b6001600160a01b0382166200066f5760405162461bcd60e51b8152602060048201526000602482015260440162000441565b620006948260405180606001604052806029815260200162001cb16029913962000a08565b6000620006a062000253565b825190915061ffff1660005b83518110156200040d576000848281518110620006cd57620006cd62000d96565b6020908102919091018101516001600160e01b0319811660009081526001870183526040908190208151808301909252546001600160a01b038116808352600160a01b90910461ffff169382019390935290925090620007705760405162461bcd60e51b815260206004820152601360248201527f4e6f20666163657420746f2072656d6f76652e00000000000000000000000000604482015260640162000441565b80516001600160a01b03163014620007d75760405162461bcd60e51b815260206004820152602360248201527f43616e27742072656d6f766520616e20696d6d757461626c652066756e63746960448201526237b71760e91b606482015260840162000441565b620007e28462000f4d565b935083816020015161ffff1614620008d15760008560020185815481106200080e576200080e62000d96565b90600052602060002090600891828204019190066004029054906101000a900460e01b90508086600201836020015161ffff168154811062000854576200085462000d96565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055508160200151866001016000836001600160e01b0319166001600160e01b031916815260200190815260200160002060000160146101000a81548161ffff021916908361ffff160217905550505b84600201805480620008e757620008e762000f67565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319909316815260018601909252506040902080546001600160b01b0319169055806200094c8162000dd8565b915050620006ac565b6001600160a01b03821662000968575050565b6200098d8260405180606001604052806028815260200162001cda6028913962000a08565b600080836001600160a01b031683604051620009aa919062000f7d565b600060405180830381855af49150503d8060008114620009e7576040519150601f19603f3d011682016040523d82523d6000602084013e620009ec565b606091505b5091509150816200063757805115620001e65780518082602001fd5b813b8181620006375760405162461bcd60e51b815260040162000441919062000f9b565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171562000a675762000a6762000a2c565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000a985762000a9862000a2c565b604052919050565b60006001600160401b0382111562000abc5762000abc62000a2c565b5060051b60200190565b80516001600160a01b038116811462000ade57600080fd5b919050565b60005b8381101562000b0057818101518382015260200162000ae6565b50506000910152565b60006060828403121562000b1c57600080fd5b62000b2662000a42565b905062000b338262000ac6565b8152602062000b4481840162000ac6565b8282015260408301516001600160401b038082111562000b6357600080fd5b818501915085601f83011262000b7857600080fd5b81518181111562000b8d5762000b8d62000a2c565b62000ba1601f8201601f1916850162000a6d565b9150808252868482850101111562000bb857600080fd5b62000bc98185840186860162000ae3565b50604084015250909392505050565b6000806040838503121562000bec57600080fd5b82516001600160401b038082111562000c0457600080fd5b818501915085601f83011262000c1957600080fd5b8151602062000c3262000c2c8362000aa0565b62000a6d565b82815260059290921b8401810191818101908984111562000c5257600080fd5b8286015b8481101562000d625780518681111562000c6f57600080fd5b87016060818d03601f1901121562000c8657600080fd5b62000c9062000a42565b62000c9d86830162000ac6565b815260408201516003811062000cb257600080fd5b8187015260608201518881111562000cc957600080fd5b8083019250508c603f83011262000cdf57600080fd5b8582015162000cf262000c2c8262000aa0565b81815260059190911b830160400190878101908f83111562000d1357600080fd5b6040850194505b8285101562000d4c5784516001600160e01b03198116811462000d3c57600080fd5b8252938801939088019062000d1a565b6040840152505084525091830191830162000c56565b509188015191965090935050508082111562000d7d57600080fd5b5062000d8c8582860162000b09565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162000ded5762000ded62000dc2565b5060010190565b6000815180845262000e0e81602086016020860162000ae3565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b8481101562000ef757898403607f19018652815180516001600160a01b0316855283810151898601906003811062000e9357634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b8083101562000ee15783516001600160e01b031916825292860192600192909201919086019062000eb5565b5097850197955050509082019060010162000e4b565b50506001600160a01b038a1690880152868103604088015262000f1b818962000df4565b9a9950505050505050505050565b600061ffff80831681810362000f435762000f4362000dc2565b6001019392505050565b60008162000f5f5762000f5f62000dc2565b506000190190565b634e487b7160e01b600052603160045260246000fd5b6000825162000f9181846020870162000ae3565b9190910192915050565b60208152600062000fb0602083018462000df4565b9392505050565b610cea8062000fc76000396000f3fe60806040523661000b57005b600080356001600160e01b03191681527f6b31a88a1d36ceba695c96c7e3e64760eb15db319092c747fb72252ca786e28e6020526040902054600080516020610c958339815191529081906001600160a01b0316806100a75760405162461bcd60e51b8152602060048201526013602482015272233ab731ba34b7b7103737ba103337bab7321760691b60448201526064015b60405180910390fd5b60405136600082376000803683855af43d806000843e8180156100c8578184f35b8184fd5b60006100d661028d565b80546001600160a01b038481166001600160a01b031983168117845560405193945091169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60005b8351811015610242576000848281518110610148576101486109ef565b6020026020010151604001519050600085838151811061016a5761016a6109ef565b6020026020010151600001519050815160000361018657600080fd5b600086848151811061019a5761019a6109ef565b6020026020010151602001519050600060028111156101bb576101bb610a05565b8160028111156101cd576101cd610a05565b036101e1576101dc828461029f565b61022c565b60018160028111156101f5576101f5610a05565b03610204576101dc828461042c565b600281600281111561021857610218610a05565b03610227576101dc8284610635565b600080fd5b505050808061023a90610a31565b91505061012b565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161027693929190610a9a565b60405180910390a16102888282610925565b505050565b600080516020610c9583398151915290565b6001600160a01b0382166102b257600080fd5b6102d482604051806060016040528060258152602001610c70602591396109ce565b60006102de61028d565b825190915060005b8351811015610425576000848281518110610303576103036109ef565b6020908102919091018101516001600160e01b031981166000908152600187019092526040909120549091506001600160a01b0316801561034357600080fd5b6040805180820182526001600160a01b03808a16825261ffff80881660208085019182526001600160e01b0319881660009081526001808d018352968120955186549351909416600160a01b026001600160b01b031990931693909416929092171790925560028801805493840181558152206008820401805460e085901c60046007909416939093026101000a92830263ffffffff90930219169190911790556103ed84610b9a565b6001600160e01b03199092166000908152600386016020526040902061ffff831690555091508061041d81610a31565b9150506102e6565b5050505050565b6001600160a01b03821661045c5760405162461bcd60e51b8152602060048201526000602482015260440161009e565b61047e82604051806060016040528060298152602001610c1f602991396109ce565b600061048861028d565b905060005b825181101561062f5760008382815181106104aa576104aa6109ef565b6020908102919091018101516001600160e01b031981166000908152600186019092526040909120549091506001600160a01b03163081036105275760405162461bcd60e51b8152602060048201526016602482015275233ab731ba34b7b71034b99034b6b6baba30b136329760511b604482015260640161009e565b856001600160a01b0316816001600160a01b0316036105945760405162461bcd60e51b8152602060048201526024808201527f43616e2774207265706c61636520666163657420776974682073616d6520666160448201526331b2ba1760e11b606482015260840161009e565b6001600160a01b0381166105e95760405162461bcd60e51b815260206004820152601c60248201527b21b0b73737ba103430bb329030b2323932b9b99018103330b1b2ba1760211b604482015260640161009e565b506001600160e01b0319166000908152600183016020526040902080546001600160a01b0319166001600160a01b0386161790558061062781610a31565b91505061048d565b50505050565b6001600160a01b0382166106655760405162461bcd60e51b8152602060048201526000602482015260440161009e565b61068782604051806060016040528060298152602001610c1f602991396109ce565b600061069161028d565b825190915061ffff1660005b83518110156104255760008482815181106106ba576106ba6109ef565b6020908102919091018101516001600160e01b0319811660009081526001870183526040908190208151808301909252546001600160a01b038116808352600160a01b90910461ffff1693820193909352909250906107515760405162461bcd60e51b81526020600482015260136024820152722737903330b1b2ba103a37903932b6b7bb329760691b604482015260640161009e565b80516001600160a01b031630146107b65760405162461bcd60e51b815260206004820152602360248201527f43616e27742072656d6f766520616e20696d6d757461626c652066756e63746960448201526237b71760e91b606482015260840161009e565b6107bf84610bbb565b935083816020015161ffff16146108a75760008560020185815481106107e7576107e76109ef565b90600052602060002090600891828204019190066004029054906101000a900460e01b90508086600201836020015161ffff168154811061082a5761082a6109ef565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055508160200151866001016000836001600160e01b0319166001600160e01b031916815260200190815260200160002060000160146101000a81548161ffff021916908361ffff160217905550505b846002018054806108ba576108ba610bd2565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319909316815260018601909252506040902080546001600160b01b03191690558061091d81610a31565b91505061069d565b6001600160a01b038216610937575050565b61095982604051806060016040528060288152602001610c48602891396109ce565b600080836001600160a01b0316836040516109749190610be8565b600060405180830381855af49150503d80600081146109af576040519150601f19603f3d011682016040523d82523d6000602084013e6109b4565b606091505b50915091508161062f578051156102275780518082602001fd5b813b818161062f5760405162461bcd60e51b815260040161009e9190610c04565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610a4357610a43610a1b565b5060010190565b60005b83811015610a65578181015183820152602001610a4d565b50506000910152565b60008151808452610a86816020860160208601610a4a565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b84811015610b6a57898403607f19018652815180516001600160a01b03168552838101518986019060038110610b0957634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015610b555783516001600160e01b0319168252928601926001929092019190860190610b2b565b50978501979550505090820190600101610ac3565b50506001600160a01b038a16908801528681036040880152610b8c8189610a6e565b9a9950505050505050505050565b600061ffff808316818103610bb157610bb1610a1b565b6001019392505050565b600081610bca57610bca610a1b565b506000190190565b634e487b7160e01b600052603160045260246000fd5b60008251610bfa818460208701610a4a565b9190910192915050565b602081526000610c176020830184610a6e565b939250505056fe4c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f64652e4c69624449616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624449616d6f6e644375743a2041646420666163657420686173206e6f20636f64652e6b31a88a1d36ceba695c96c7e3e64760eb15db319092c747fb72252ca786e28da26469706673582212200ebe28e9ecdb73336c16f15a9d2435980191d5c4623f4d87289e102e287af2c564736f6c634300081100334c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f64652e4c69624449616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624449616d6f6e644375743a2041646420666163657420686173206e6f20636f64652e",
  "deployedBytecode": "0x60806040523661000b57005b600080356001600160e01b03191681527f6b31a88a1d36ceba695c96c7e3e64760eb15db319092c747fb72252ca786e28e6020526040902054600080516020610c958339815191529081906001600160a01b0316806100a75760405162461bcd60e51b8152602060048201526013602482015272233ab731ba34b7b7103737ba103337bab7321760691b60448201526064015b60405180910390fd5b60405136600082376000803683855af43d806000843e8180156100c8578184f35b8184fd5b60006100d661028d565b80546001600160a01b038481166001600160a01b031983168117845560405193945091169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60005b8351811015610242576000848281518110610148576101486109ef565b6020026020010151604001519050600085838151811061016a5761016a6109ef565b6020026020010151600001519050815160000361018657600080fd5b600086848151811061019a5761019a6109ef565b6020026020010151602001519050600060028111156101bb576101bb610a05565b8160028111156101cd576101cd610a05565b036101e1576101dc828461029f565b61022c565b60018160028111156101f5576101f5610a05565b03610204576101dc828461042c565b600281600281111561021857610218610a05565b03610227576101dc8284610635565b600080fd5b505050808061023a90610a31565b91505061012b565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161027693929190610a9a565b60405180910390a16102888282610925565b505050565b600080516020610c9583398151915290565b6001600160a01b0382166102b257600080fd5b6102d482604051806060016040528060258152602001610c70602591396109ce565b60006102de61028d565b825190915060005b8351811015610425576000848281518110610303576103036109ef565b6020908102919091018101516001600160e01b031981166000908152600187019092526040909120549091506001600160a01b0316801561034357600080fd5b6040805180820182526001600160a01b03808a16825261ffff80881660208085019182526001600160e01b0319881660009081526001808d018352968120955186549351909416600160a01b026001600160b01b031990931693909416929092171790925560028801805493840181558152206008820401805460e085901c60046007909416939093026101000a92830263ffffffff90930219169190911790556103ed84610b9a565b6001600160e01b03199092166000908152600386016020526040902061ffff831690555091508061041d81610a31565b9150506102e6565b5050505050565b6001600160a01b03821661045c5760405162461bcd60e51b8152602060048201526000602482015260440161009e565b61047e82604051806060016040528060298152602001610c1f602991396109ce565b600061048861028d565b905060005b825181101561062f5760008382815181106104aa576104aa6109ef565b6020908102919091018101516001600160e01b031981166000908152600186019092526040909120549091506001600160a01b03163081036105275760405162461bcd60e51b8152602060048201526016602482015275233ab731ba34b7b71034b99034b6b6baba30b136329760511b604482015260640161009e565b856001600160a01b0316816001600160a01b0316036105945760405162461bcd60e51b8152602060048201526024808201527f43616e2774207265706c61636520666163657420776974682073616d6520666160448201526331b2ba1760e11b606482015260840161009e565b6001600160a01b0381166105e95760405162461bcd60e51b815260206004820152601c60248201527b21b0b73737ba103430bb329030b2323932b9b99018103330b1b2ba1760211b604482015260640161009e565b506001600160e01b0319166000908152600183016020526040902080546001600160a01b0319166001600160a01b0386161790558061062781610a31565b91505061048d565b50505050565b6001600160a01b0382166106655760405162461bcd60e51b8152602060048201526000602482015260440161009e565b61068782604051806060016040528060298152602001610c1f602991396109ce565b600061069161028d565b825190915061ffff1660005b83518110156104255760008482815181106106ba576106ba6109ef565b6020908102919091018101516001600160e01b0319811660009081526001870183526040908190208151808301909252546001600160a01b038116808352600160a01b90910461ffff1693820193909352909250906107515760405162461bcd60e51b81526020600482015260136024820152722737903330b1b2ba103a37903932b6b7bb329760691b604482015260640161009e565b80516001600160a01b031630146107b65760405162461bcd60e51b815260206004820152602360248201527f43616e27742072656d6f766520616e20696d6d757461626c652066756e63746960448201526237b71760e91b606482015260840161009e565b6107bf84610bbb565b935083816020015161ffff16146108a75760008560020185815481106107e7576107e76109ef565b90600052602060002090600891828204019190066004029054906101000a900460e01b90508086600201836020015161ffff168154811061082a5761082a6109ef565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055508160200151866001016000836001600160e01b0319166001600160e01b031916815260200190815260200160002060000160146101000a81548161ffff021916908361ffff160217905550505b846002018054806108ba576108ba610bd2565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319909316815260018601909252506040902080546001600160b01b03191690558061091d81610a31565b91505061069d565b6001600160a01b038216610937575050565b61095982604051806060016040528060288152602001610c48602891396109ce565b600080836001600160a01b0316836040516109749190610be8565b600060405180830381855af49150503d80600081146109af576040519150601f19603f3d011682016040523d82523d6000602084013e6109b4565b606091505b50915091508161062f578051156102275780518082602001fd5b813b818161062f5760405162461bcd60e51b815260040161009e9190610c04565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610a4357610a43610a1b565b5060010190565b60005b83811015610a65578181015183820152602001610a4d565b50506000910152565b60008151808452610a86816020860160208601610a4a565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b84811015610b6a57898403607f19018652815180516001600160a01b03168552838101518986019060038110610b0957634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015610b555783516001600160e01b0319168252928601926001929092019190860190610b2b565b50978501979550505090820190600101610ac3565b50506001600160a01b038a16908801528681036040880152610b8c8189610a6e565b9a9950505050505050505050565b600061ffff808316818103610bb157610bb1610a1b565b6001019392505050565b600081610bca57610bca610a1b565b506000190190565b634e487b7160e01b600052603160045260246000fd5b60008251610bfa818460208701610a4a565b9190910192915050565b602081526000610c176020830184610a6e565b939250505056fe4c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f64652e4c69624449616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624449616d6f6e644375743a2041646420666163657420686173206e6f20636f64652e6b31a88a1d36ceba695c96c7e3e64760eb15db319092c747fb72252ca786e28da26469706673582212200ebe28e9ecdb73336c16f15a9d2435980191d5c4623f4d87289e102e287af2c564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}